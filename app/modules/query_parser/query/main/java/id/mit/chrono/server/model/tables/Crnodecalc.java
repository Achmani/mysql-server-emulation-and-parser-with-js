/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrnodecalcRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crnodecalc extends TableImpl<CrnodecalcRecord> {

    private static final long serialVersionUID = 1042205738;

    /**
     * The reference instance of <code>chrono.crnodecalc</code>
     */
    public static final Crnodecalc CRNODECALC = new Crnodecalc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrnodecalcRecord> getRecordType() {
        return CrnodecalcRecord.class;
    }

    /**
     * The column <code>chrono.crnodecalc.nodecalc_id</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_ID = createField("nodecalc_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_code</code>.
     */
    public final TableField<CrnodecalcRecord, String> NODECALC_CODE = createField("nodecalc_code", org.jooq.impl.SQLDataType.CHAR(72), this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_site</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_SITE = createField("nodecalc_site", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_nodecategory</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_NODECATEGORY = createField("nodecalc_nodecategory", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_nodetype</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_NODETYPE = createField("nodecalc_nodetype", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_revenueclass</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_REVENUECLASS = createField("nodecalc_revenueclass", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_nodeplace</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_NODEPLACE = createField("nodecalc_nodeplace", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_timezone</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_TIMEZONE = createField("nodecalc_timezone", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_builddate</code>.
     */
    public final TableField<CrnodecalcRecord, Date> NODECALC_BUILDDATE = createField("nodecalc_builddate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_nodestate</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_NODESTATE = createField("nodecalc_nodestate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodecalc.nodecalc_lastupdate</code>.
     */
    public final TableField<CrnodecalcRecord, Integer> NODECALC_LASTUPDATE = createField("nodecalc_lastupdate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>chrono.crnodecalc</code> table reference
     */
    public Crnodecalc() {
        this(DSL.name("crnodecalc"), null);
    }

    /**
     * Create an aliased <code>chrono.crnodecalc</code> table reference
     */
    public Crnodecalc(String alias) {
        this(DSL.name(alias), CRNODECALC);
    }

    /**
     * Create an aliased <code>chrono.crnodecalc</code> table reference
     */
    public Crnodecalc(Name alias) {
        this(alias, CRNODECALC);
    }

    private Crnodecalc(Name alias, Table<CrnodecalcRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crnodecalc(Name alias, Table<CrnodecalcRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrnodecalcRecord> getPrimaryKey() {
        return Keys.KEY_CRNODECALC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrnodecalcRecord>> getKeys() {
        return Arrays.<UniqueKey<CrnodecalcRecord>>asList(Keys.KEY_CRNODECALC_PRIMARY, Keys.KEY_CRNODECALC_NODE_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnodecalc as(String alias) {
        return new Crnodecalc(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnodecalc as(Name alias) {
        return new Crnodecalc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnodecalc rename(String name) {
        return new Crnodecalc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnodecalc rename(Name name) {
        return new Crnodecalc(name, null);
    }
}
