/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrobjectRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crobject extends TableImpl<CrobjectRecord> {

    private static final long serialVersionUID = -693541962;

    /**
     * The reference instance of <code>chrono.crobject</code>
     */
    public static final Crobject CROBJECT = new Crobject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrobjectRecord> getRecordType() {
        return CrobjectRecord.class;
    }

    /**
     * The column <code>chrono.crobject.crobject_id</code>.
     */
    public final TableField<CrobjectRecord, UInteger> CROBJECT_ID = createField("crobject_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.crobject.crobject_code</code>.
     */
    public final TableField<CrobjectRecord, String> CROBJECT_CODE = createField("crobject_code", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>chrono.crobject.crobject_vendor</code>.
     */
    public final TableField<CrobjectRecord, UInteger> CROBJECT_VENDOR = createField("crobject_vendor", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.crobject.crobject_objectcategory</code>.
     */
    public final TableField<CrobjectRecord, Integer> CROBJECT_OBJECTCATEGORY = createField("crobject_objectcategory", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crobject.crobject_label</code>.
     */
    public final TableField<CrobjectRecord, String> CROBJECT_LABEL = createField("crobject_label", org.jooq.impl.SQLDataType.CHAR(64), this, "");

    /**
     * The column <code>chrono.crobject.crobject_isendpoint</code>.
     */
    public final TableField<CrobjectRecord, Byte> CROBJECT_ISENDPOINT = createField("crobject_isendpoint", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>chrono.crobject.crobject_multisearch</code>.
     */
    public final TableField<CrobjectRecord, Byte> CROBJECT_MULTISEARCH = createField("crobject_multisearch", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>chrono.crobject.crobject_mapentity</code>.
     */
    public final TableField<CrobjectRecord, Integer> CROBJECT_MAPENTITY = createField("crobject_mapentity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crobject.crobject_labelcolumn</code>.
     */
    public final TableField<CrobjectRecord, String> CROBJECT_LABELCOLUMN = createField("crobject_labelcolumn", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>chrono.crobject</code> table reference
     */
    public Crobject() {
        this(DSL.name("crobject"), null);
    }

    /**
     * Create an aliased <code>chrono.crobject</code> table reference
     */
    public Crobject(String alias) {
        this(DSL.name(alias), CROBJECT);
    }

    /**
     * Create an aliased <code>chrono.crobject</code> table reference
     */
    public Crobject(Name alias) {
        this(alias, CROBJECT);
    }

    private Crobject(Name alias, Table<CrobjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crobject(Name alias, Table<CrobjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrobjectRecord> getPrimaryKey() {
        return Keys.KEY_CROBJECT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrobjectRecord>> getKeys() {
        return Arrays.<UniqueKey<CrobjectRecord>>asList(Keys.KEY_CROBJECT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crobject as(String alias) {
        return new Crobject(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crobject as(Name alias) {
        return new Crobject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crobject rename(String name) {
        return new Crobject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crobject rename(Name name) {
        return new Crobject(name, null);
    }
}
