/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables.records;


import id.mit.chrono.server.model.tables.Crdataexporttype;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CrdataexporttypeRecord extends UpdatableRecordImpl<CrdataexporttypeRecord> implements Record4<Integer, String, String, String> {

    private static final long serialVersionUID = 658843781;

    /**
     * Setter for <code>chrono.crdataexporttype.dataexporttype_id</code>.
     */
    public void setDataexporttypeId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>chrono.crdataexporttype.dataexporttype_id</code>.
     */
    public Integer getDataexporttypeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>chrono.crdataexporttype.dataexporttype_code</code>.
     */
    public void setDataexporttypeCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>chrono.crdataexporttype.dataexporttype_code</code>.
     */
    public String getDataexporttypeCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>chrono.crdataexporttype.dataexporttype_name</code>.
     */
    public void setDataexporttypeName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>chrono.crdataexporttype.dataexporttype_name</code>.
     */
    public String getDataexporttypeName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>chrono.crdataexporttype.dataexporttype_desc</code>.
     */
    public void setDataexporttypeDesc(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>chrono.crdataexporttype.dataexporttype_desc</code>.
     */
    public String getDataexporttypeDesc() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Crdataexporttype.CRDATAEXPORTTYPE.DATAEXPORTTYPE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Crdataexporttype.CRDATAEXPORTTYPE.DATAEXPORTTYPE_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Crdataexporttype.CRDATAEXPORTTYPE.DATAEXPORTTYPE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Crdataexporttype.CRDATAEXPORTTYPE.DATAEXPORTTYPE_DESC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getDataexporttypeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getDataexporttypeCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getDataexporttypeName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getDataexporttypeDesc();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getDataexporttypeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getDataexporttypeCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getDataexporttypeName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getDataexporttypeDesc();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrdataexporttypeRecord value1(Integer value) {
        setDataexporttypeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrdataexporttypeRecord value2(String value) {
        setDataexporttypeCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrdataexporttypeRecord value3(String value) {
        setDataexporttypeName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrdataexporttypeRecord value4(String value) {
        setDataexporttypeDesc(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrdataexporttypeRecord values(Integer value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CrdataexporttypeRecord
     */
    public CrdataexporttypeRecord() {
        super(Crdataexporttype.CRDATAEXPORTTYPE);
    }

    /**
     * Create a detached, initialised CrdataexporttypeRecord
     */
    public CrdataexporttypeRecord(Integer dataexporttypeId, String dataexporttypeCode, String dataexporttypeName, String dataexporttypeDesc) {
        super(Crdataexporttype.CRDATAEXPORTTYPE);

        set(0, dataexporttypeId);
        set(1, dataexporttypeCode);
        set(2, dataexporttypeName);
        set(3, dataexporttypeDesc);
    }
}
