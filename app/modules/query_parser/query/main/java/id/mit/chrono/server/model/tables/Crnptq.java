/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrnptqRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crnptq extends TableImpl<CrnptqRecord> {

    private static final long serialVersionUID = -906629700;

    /**
     * The reference instance of <code>chrono.crnptq</code>
     */
    public static final Crnptq CRNPTQ = new Crnptq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrnptqRecord> getRecordType() {
        return CrnptqRecord.class;
    }

    /**
     * The column <code>chrono.crnptq.nptq_id</code>.
     */
    public final TableField<CrnptqRecord, UInteger> NPTQ_ID = createField("nptq_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.crnptq.nptq_object</code>.
     */
    public final TableField<CrnptqRecord, String> NPTQ_OBJECT = createField("nptq_object", org.jooq.impl.SQLDataType.CHAR(64), this, "");

    /**
     * The column <code>chrono.crnptq.nptq_params</code>.
     */
    public final TableField<CrnptqRecord, String> NPTQ_PARAMS = createField("nptq_params", org.jooq.impl.SQLDataType.CHAR(128), this, "");

    /**
     * The column <code>chrono.crnptq.nptq_entity</code>.
     */
    public final TableField<CrnptqRecord, String> NPTQ_ENTITY = createField("nptq_entity", org.jooq.impl.SQLDataType.CHAR(10), this, "");

    /**
     * The column <code>chrono.crnptq.nptq_backup_object</code>.
     */
    public final TableField<CrnptqRecord, String> NPTQ_BACKUP_OBJECT = createField("nptq_backup_object", org.jooq.impl.SQLDataType.CHAR(128), this, "");

    /**
     * The column <code>chrono.crnptq.nptq_backup_params</code>.
     */
    public final TableField<CrnptqRecord, String> NPTQ_BACKUP_PARAMS = createField("nptq_backup_params", org.jooq.impl.SQLDataType.CHAR(128), this, "");

    /**
     * The column <code>chrono.crnptq.nptq_priority</code>.
     */
    public final TableField<CrnptqRecord, Integer> NPTQ_PRIORITY = createField("nptq_priority", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnptq.nptq_mo_level</code>.
     */
    public final TableField<CrnptqRecord, String> NPTQ_MO_LEVEL = createField("nptq_mo_level", org.jooq.impl.SQLDataType.CHAR(6), this, "");

    /**
     * Create a <code>chrono.crnptq</code> table reference
     */
    public Crnptq() {
        this(DSL.name("crnptq"), null);
    }

    /**
     * Create an aliased <code>chrono.crnptq</code> table reference
     */
    public Crnptq(String alias) {
        this(DSL.name(alias), CRNPTQ);
    }

    /**
     * Create an aliased <code>chrono.crnptq</code> table reference
     */
    public Crnptq(Name alias) {
        this(alias, CRNPTQ);
    }

    private Crnptq(Name alias, Table<CrnptqRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crnptq(Name alias, Table<CrnptqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrnptqRecord> getPrimaryKey() {
        return Keys.KEY_CRNPTQ_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrnptqRecord>> getKeys() {
        return Arrays.<UniqueKey<CrnptqRecord>>asList(Keys.KEY_CRNPTQ_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnptq as(String alias) {
        return new Crnptq(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnptq as(Name alias) {
        return new Crnptq(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnptq rename(String name) {
        return new Crnptq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnptq rename(Name name) {
        return new Crnptq(name, null);
    }
}
