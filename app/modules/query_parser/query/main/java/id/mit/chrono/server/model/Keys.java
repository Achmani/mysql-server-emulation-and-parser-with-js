/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model;


import id.mit.chrono.server.model.tables.Columnset;
import id.mit.chrono.server.model.tables.Crantenna;
import id.mit.chrono.server.model.tables.Crantennatype;
import id.mit.chrono.server.model.tables.Crappvar;
import id.mit.chrono.server.model.tables.Crbrand;
import id.mit.chrono.server.model.tables.Crcell;
import id.mit.chrono.server.model.tables.Crcellclass;
import id.mit.chrono.server.model.tables.Crcellclassgroup;
import id.mit.chrono.server.model.tables.Crcellcoverage;
import id.mit.chrono.server.model.tables.Crcellnodeid;
import id.mit.chrono.server.model.tables.Crcellpattern;
import id.mit.chrono.server.model.tables.Crcellstatus;
import id.mit.chrono.server.model.tables.Crcollectorstatus;
import id.mit.chrono.server.model.tables.Crcollectortask;
import id.mit.chrono.server.model.tables.Crcollectortaskfiles;
import id.mit.chrono.server.model.tables.Crcollectortasksources;
import id.mit.chrono.server.model.tables.Crcompany;
import id.mit.chrono.server.model.tables.Crcountry;
import id.mit.chrono.server.model.tables.Crdataexport;
import id.mit.chrono.server.model.tables.Crdataexporttask;
import id.mit.chrono.server.model.tables.Crdataexporttask2;
import id.mit.chrono.server.model.tables.Crdataexporttype;
import id.mit.chrono.server.model.tables.Crdatagroup;
import id.mit.chrono.server.model.tables.Crdatasource;
import id.mit.chrono.server.model.tables.Crdatasourcecommands;
import id.mit.chrono.server.model.tables.Crdatasourcetype;
import id.mit.chrono.server.model.tables.Crdatatype;
import id.mit.chrono.server.model.tables.Crenodebmme;
import id.mit.chrono.server.model.tables.Crfinalizertask;
import id.mit.chrono.server.model.tables.Crfinalizertask_20201023;
import id.mit.chrono.server.model.tables.Crflag;
import id.mit.chrono.server.model.tables.Crgeomap;
import id.mit.chrono.server.model.tables.Crgeomap2;
import id.mit.chrono.server.model.tables.Crgeomap3;
import id.mit.chrono.server.model.tables.Crisland;
import id.mit.chrono.server.model.tables.Crlandstatus;
import id.mit.chrono.server.model.tables.Crmapentity;
import id.mit.chrono.server.model.tables.Crmapfield;
import id.mit.chrono.server.model.tables.Crmaplevel;
import id.mit.chrono.server.model.tables.Crmapnptq;
import id.mit.chrono.server.model.tables.Crmapparser;
import id.mit.chrono.server.model.tables.Crnode;
import id.mit.chrono.server.model.tables.Crnodecalc;
import id.mit.chrono.server.model.tables.Crnodecategory;
import id.mit.chrono.server.model.tables.Crnodemaps;
import id.mit.chrono.server.model.tables.Crnodepattern;
import id.mit.chrono.server.model.tables.Crnodeplace;
import id.mit.chrono.server.model.tables.Crnodestate;
import id.mit.chrono.server.model.tables.Crnodestatus;
import id.mit.chrono.server.model.tables.Crnodetype;
import id.mit.chrono.server.model.tables.Crnptq;
import id.mit.chrono.server.model.tables.Crobject;
import id.mit.chrono.server.model.tables.Crobjectcategory;
import id.mit.chrono.server.model.tables.Crprocessorstatistic;
import id.mit.chrono.server.model.tables.Crprocessortaskfiles;
import id.mit.chrono.server.model.tables.Crprocessstatus;
import id.mit.chrono.server.model.tables.Crprovince;
import id.mit.chrono.server.model.tables.Crqueryset;
import id.mit.chrono.server.model.tables.Crranbts;
import id.mit.chrono.server.model.tables.Crrancell;
import id.mit.chrono.server.model.tables.Crrancelladv;
import id.mit.chrono.server.model.tables.Crrancontroller;
import id.mit.chrono.server.model.tables.Crrelsitesitearea;
import id.mit.chrono.server.model.tables.Crrevenueclass;
import id.mit.chrono.server.model.tables.Crsettings;
import id.mit.chrono.server.model.tables.Crsite;
import id.mit.chrono.server.model.tables.CrsiteOld;
import id.mit.chrono.server.model.tables.Crsitearea;
import id.mit.chrono.server.model.tables.CrsiteareaOld;
import id.mit.chrono.server.model.tables.Crsiteflags;
import id.mit.chrono.server.model.tables.Crsiteprefix;
import id.mit.chrono.server.model.tables.Crsitestate;
import id.mit.chrono.server.model.tables.Crsitetype;
import id.mit.chrono.server.model.tables.Crsourceparser;
import id.mit.chrono.server.model.tables.Crstaticgcell;
import id.mit.chrono.server.model.tables.CrstaticgcellCopy;
import id.mit.chrono.server.model.tables.Crstaticlcell;
import id.mit.chrono.server.model.tables.CrstaticlcellCopy;
import id.mit.chrono.server.model.tables.Crstaticucell;
import id.mit.chrono.server.model.tables.Crsubdistrict;
import id.mit.chrono.server.model.tables.Crsummaryarea;
import id.mit.chrono.server.model.tables.Crsummarynation;
import id.mit.chrono.server.model.tables.Crsummaryoss;
import id.mit.chrono.server.model.tables.Crsummaryregional;
import id.mit.chrono.server.model.tables.Crsummaryvendor;
import id.mit.chrono.server.model.tables.Crtest;
import id.mit.chrono.server.model.tables.Crtimecatalog;
import id.mit.chrono.server.model.tables.Crtimezone;
import id.mit.chrono.server.model.tables.Crvendor;
import id.mit.chrono.server.model.tables.Crvendorparamset;
import id.mit.chrono.server.model.tables.Crworkflow;
import id.mit.chrono.server.model.tables.Dailysysinfo2gcompare;
import id.mit.chrono.server.model.tables.Dailysysinfo2gcompare2;
import id.mit.chrono.server.model.tables.Erbsc;
import id.mit.chrono.server.model.tables.Erbts;
import id.mit.chrono.server.model.tables.Erenodeb;
import id.mit.chrono.server.model.tables.Ergcell;
import id.mit.chrono.server.model.tables.Ergcellmap;
import id.mit.chrono.server.model.tables.Ergnodeb;
import id.mit.chrono.server.model.tables.Erinventory;
import id.mit.chrono.server.model.tables.Erinventory2;
import id.mit.chrono.server.model.tables.Erlcell;
import id.mit.chrono.server.model.tables.Ermme;
import id.mit.chrono.server.model.tables.Erncell;
import id.mit.chrono.server.model.tables.Ernodeb;
import id.mit.chrono.server.model.tables.Errnc;
import id.mit.chrono.server.model.tables.Erucell;
import id.mit.chrono.server.model.tables.Hwbsc;
import id.mit.chrono.server.model.tables.Hwbscbrd;
import id.mit.chrono.server.model.tables.Hwbsce1t1;
import id.mit.chrono.server.model.tables.Hwbscethport;
import id.mit.chrono.server.model.tables.Hwbts;
import id.mit.chrono.server.model.tables.Hwenodeb;
import id.mit.chrono.server.model.tables.Hwgcell;
import id.mit.chrono.server.model.tables.Hwgnodeb;
import id.mit.chrono.server.model.tables.Hwgtrx;
import id.mit.chrono.server.model.tables.Hwgtrxchan;
import id.mit.chrono.server.model.tables.Hwinventory;
import id.mit.chrono.server.model.tables.Hwlcell;
import id.mit.chrono.server.model.tables.Hwmme;
import id.mit.chrono.server.model.tables.Hwncell;
import id.mit.chrono.server.model.tables.Hwnodeb;
import id.mit.chrono.server.model.tables.Hwrnc;
import id.mit.chrono.server.model.tables.Hwucell;
import id.mit.chrono.server.model.tables.Inventory;
import id.mit.chrono.server.model.tables.Inventoryfieldvalidation;
import id.mit.chrono.server.model.tables.Inventorytype;
import id.mit.chrono.server.model.tables.Lacimareject;
import id.mit.chrono.server.model.tables.MTempsysinfo2g;
import id.mit.chrono.server.model.tables.MTempsysinfo3g;
import id.mit.chrono.server.model.tables.MTempsysinfo4g;
import id.mit.chrono.server.model.tables.Nokbsc;
import id.mit.chrono.server.model.tables.Nokbts;
import id.mit.chrono.server.model.tables.Nokenodeb;
import id.mit.chrono.server.model.tables.Nokgcell;
import id.mit.chrono.server.model.tables.Nokgtrx;
import id.mit.chrono.server.model.tables.Nokinventory;
import id.mit.chrono.server.model.tables.Noklcell;
import id.mit.chrono.server.model.tables.Nokmme;
import id.mit.chrono.server.model.tables.Noknodeb;
import id.mit.chrono.server.model.tables.Nokrnc;
import id.mit.chrono.server.model.tables.Nokucell;
import id.mit.chrono.server.model.tables.Stylogcell;
import id.mit.chrono.server.model.tables.Stylolcell;
import id.mit.chrono.server.model.tables.Styloucell;
import id.mit.chrono.server.model.tables.Temp;
import id.mit.chrono.server.model.tables.TempCrsite;
import id.mit.chrono.server.model.tables.TempCrstatic;
import id.mit.chrono.server.model.tables.TempCrstaticCopy;
import id.mit.chrono.server.model.tables.TempXxx;
import id.mit.chrono.server.model.tables.Ztebsc;
import id.mit.chrono.server.model.tables.Ztebscemlppuserpriority;
import id.mit.chrono.server.model.tables.Ztebscextgcell;
import id.mit.chrono.server.model.tables.ZtebscextgcellX;
import id.mit.chrono.server.model.tables.Ztebscextlcell;
import id.mit.chrono.server.model.tables.ZtebscextlcellX;
import id.mit.chrono.server.model.tables.Ztebscextucell;
import id.mit.chrono.server.model.tables.ZtebscextucellX;
import id.mit.chrono.server.model.tables.Ztebsclocarea;
import id.mit.chrono.server.model.tables.Ztebscroutingarea;
import id.mit.chrono.server.model.tables.Ztebts;
import id.mit.chrono.server.model.tables.Zteenodeb;
import id.mit.chrono.server.model.tables.Ztegcell;
import id.mit.chrono.server.model.tables.Ztegcellbvc;
import id.mit.chrono.server.model.tables.Ztegcellpsusrandsrvtype;
import id.mit.chrono.server.model.tables.Ztegcellrelgcell;
import id.mit.chrono.server.model.tables.Ztegcellrellcell;
import id.mit.chrono.server.model.tables.Ztegcellrelucell;
import id.mit.chrono.server.model.tables.Ztegnodeb;
import id.mit.chrono.server.model.tables.Ztegtrx;
import id.mit.chrono.server.model.tables.Ztegts;
import id.mit.chrono.server.model.tables.Zteinventory;
import id.mit.chrono.server.model.tables.Zteinventoryvalidation;
import id.mit.chrono.server.model.tables.Ztelcell;
import id.mit.chrono.server.model.tables.Ztemme;
import id.mit.chrono.server.model.tables.Ztencell;
import id.mit.chrono.server.model.tables.Ztenodeb;
import id.mit.chrono.server.model.tables.Zternc;
import id.mit.chrono.server.model.tables.Zteucell;
import id.mit.chrono.server.model.tables.records.ColumnsetRecord;
import id.mit.chrono.server.model.tables.records.CrantennaRecord;
import id.mit.chrono.server.model.tables.records.CrantennatypeRecord;
import id.mit.chrono.server.model.tables.records.CrappvarRecord;
import id.mit.chrono.server.model.tables.records.CrbrandRecord;
import id.mit.chrono.server.model.tables.records.CrcellRecord;
import id.mit.chrono.server.model.tables.records.CrcellclassRecord;
import id.mit.chrono.server.model.tables.records.CrcellclassgroupRecord;
import id.mit.chrono.server.model.tables.records.CrcellcoverageRecord;
import id.mit.chrono.server.model.tables.records.CrcellnodeidRecord;
import id.mit.chrono.server.model.tables.records.CrcellpatternRecord;
import id.mit.chrono.server.model.tables.records.CrcellstatusRecord;
import id.mit.chrono.server.model.tables.records.CrcollectorstatusRecord;
import id.mit.chrono.server.model.tables.records.CrcollectortaskRecord;
import id.mit.chrono.server.model.tables.records.CrcollectortaskfilesRecord;
import id.mit.chrono.server.model.tables.records.CrcollectortasksourcesRecord;
import id.mit.chrono.server.model.tables.records.CrcompanyRecord;
import id.mit.chrono.server.model.tables.records.CrcountryRecord;
import id.mit.chrono.server.model.tables.records.CrdataexportRecord;
import id.mit.chrono.server.model.tables.records.Crdataexporttask2Record;
import id.mit.chrono.server.model.tables.records.CrdataexporttaskRecord;
import id.mit.chrono.server.model.tables.records.CrdataexporttypeRecord;
import id.mit.chrono.server.model.tables.records.CrdatagroupRecord;
import id.mit.chrono.server.model.tables.records.CrdatasourceRecord;
import id.mit.chrono.server.model.tables.records.CrdatasourcecommandsRecord;
import id.mit.chrono.server.model.tables.records.CrdatasourcetypeRecord;
import id.mit.chrono.server.model.tables.records.CrdatatypeRecord;
import id.mit.chrono.server.model.tables.records.CrenodebmmeRecord;
import id.mit.chrono.server.model.tables.records.CrfinalizertaskRecord;
import id.mit.chrono.server.model.tables.records.Crfinalizertask_20201023Record;
import id.mit.chrono.server.model.tables.records.CrflagRecord;
import id.mit.chrono.server.model.tables.records.Crgeomap2Record;
import id.mit.chrono.server.model.tables.records.Crgeomap3Record;
import id.mit.chrono.server.model.tables.records.CrgeomapRecord;
import id.mit.chrono.server.model.tables.records.CrislandRecord;
import id.mit.chrono.server.model.tables.records.CrlandstatusRecord;
import id.mit.chrono.server.model.tables.records.CrmapentityRecord;
import id.mit.chrono.server.model.tables.records.CrmapfieldRecord;
import id.mit.chrono.server.model.tables.records.CrmaplevelRecord;
import id.mit.chrono.server.model.tables.records.CrmapnptqRecord;
import id.mit.chrono.server.model.tables.records.CrmapparserRecord;
import id.mit.chrono.server.model.tables.records.CrnodeRecord;
import id.mit.chrono.server.model.tables.records.CrnodecalcRecord;
import id.mit.chrono.server.model.tables.records.CrnodecategoryRecord;
import id.mit.chrono.server.model.tables.records.CrnodemapsRecord;
import id.mit.chrono.server.model.tables.records.CrnodepatternRecord;
import id.mit.chrono.server.model.tables.records.CrnodeplaceRecord;
import id.mit.chrono.server.model.tables.records.CrnodestateRecord;
import id.mit.chrono.server.model.tables.records.CrnodestatusRecord;
import id.mit.chrono.server.model.tables.records.CrnodetypeRecord;
import id.mit.chrono.server.model.tables.records.CrnptqRecord;
import id.mit.chrono.server.model.tables.records.CrobjectRecord;
import id.mit.chrono.server.model.tables.records.CrobjectcategoryRecord;
import id.mit.chrono.server.model.tables.records.CrprocessorstatisticRecord;
import id.mit.chrono.server.model.tables.records.CrprocessortaskfilesRecord;
import id.mit.chrono.server.model.tables.records.CrprocessstatusRecord;
import id.mit.chrono.server.model.tables.records.CrprovinceRecord;
import id.mit.chrono.server.model.tables.records.CrquerysetRecord;
import id.mit.chrono.server.model.tables.records.CrranbtsRecord;
import id.mit.chrono.server.model.tables.records.CrrancellRecord;
import id.mit.chrono.server.model.tables.records.CrrancelladvRecord;
import id.mit.chrono.server.model.tables.records.CrrancontrollerRecord;
import id.mit.chrono.server.model.tables.records.CrrelsitesiteareaRecord;
import id.mit.chrono.server.model.tables.records.CrrevenueclassRecord;
import id.mit.chrono.server.model.tables.records.CrsettingsRecord;
import id.mit.chrono.server.model.tables.records.CrsiteOldRecord;
import id.mit.chrono.server.model.tables.records.CrsiteRecord;
import id.mit.chrono.server.model.tables.records.CrsiteareaOldRecord;
import id.mit.chrono.server.model.tables.records.CrsiteareaRecord;
import id.mit.chrono.server.model.tables.records.CrsiteflagsRecord;
import id.mit.chrono.server.model.tables.records.CrsiteprefixRecord;
import id.mit.chrono.server.model.tables.records.CrsitestateRecord;
import id.mit.chrono.server.model.tables.records.CrsitetypeRecord;
import id.mit.chrono.server.model.tables.records.CrsourceparserRecord;
import id.mit.chrono.server.model.tables.records.CrstaticgcellCopyRecord;
import id.mit.chrono.server.model.tables.records.CrstaticgcellRecord;
import id.mit.chrono.server.model.tables.records.CrstaticlcellCopyRecord;
import id.mit.chrono.server.model.tables.records.CrstaticlcellRecord;
import id.mit.chrono.server.model.tables.records.CrstaticucellRecord;
import id.mit.chrono.server.model.tables.records.CrsubdistrictRecord;
import id.mit.chrono.server.model.tables.records.CrsummaryareaRecord;
import id.mit.chrono.server.model.tables.records.CrsummarynationRecord;
import id.mit.chrono.server.model.tables.records.CrsummaryossRecord;
import id.mit.chrono.server.model.tables.records.CrsummaryregionalRecord;
import id.mit.chrono.server.model.tables.records.CrsummaryvendorRecord;
import id.mit.chrono.server.model.tables.records.CrtestRecord;
import id.mit.chrono.server.model.tables.records.CrtimecatalogRecord;
import id.mit.chrono.server.model.tables.records.CrtimezoneRecord;
import id.mit.chrono.server.model.tables.records.CrvendorRecord;
import id.mit.chrono.server.model.tables.records.CrvendorparamsetRecord;
import id.mit.chrono.server.model.tables.records.CrworkflowRecord;
import id.mit.chrono.server.model.tables.records.Dailysysinfo2gcompare2Record;
import id.mit.chrono.server.model.tables.records.Dailysysinfo2gcompareRecord;
import id.mit.chrono.server.model.tables.records.ErbscRecord;
import id.mit.chrono.server.model.tables.records.ErbtsRecord;
import id.mit.chrono.server.model.tables.records.ErenodebRecord;
import id.mit.chrono.server.model.tables.records.ErgcellRecord;
import id.mit.chrono.server.model.tables.records.ErgcellmapRecord;
import id.mit.chrono.server.model.tables.records.ErgnodebRecord;
import id.mit.chrono.server.model.tables.records.Erinventory2Record;
import id.mit.chrono.server.model.tables.records.ErinventoryRecord;
import id.mit.chrono.server.model.tables.records.ErlcellRecord;
import id.mit.chrono.server.model.tables.records.ErmmeRecord;
import id.mit.chrono.server.model.tables.records.ErncellRecord;
import id.mit.chrono.server.model.tables.records.ErnodebRecord;
import id.mit.chrono.server.model.tables.records.ErrncRecord;
import id.mit.chrono.server.model.tables.records.ErucellRecord;
import id.mit.chrono.server.model.tables.records.HwbscRecord;
import id.mit.chrono.server.model.tables.records.HwbscbrdRecord;
import id.mit.chrono.server.model.tables.records.Hwbsce1t1Record;
import id.mit.chrono.server.model.tables.records.HwbscethportRecord;
import id.mit.chrono.server.model.tables.records.HwbtsRecord;
import id.mit.chrono.server.model.tables.records.HwenodebRecord;
import id.mit.chrono.server.model.tables.records.HwgcellRecord;
import id.mit.chrono.server.model.tables.records.HwgnodebRecord;
import id.mit.chrono.server.model.tables.records.HwgtrxRecord;
import id.mit.chrono.server.model.tables.records.HwgtrxchanRecord;
import id.mit.chrono.server.model.tables.records.HwinventoryRecord;
import id.mit.chrono.server.model.tables.records.HwlcellRecord;
import id.mit.chrono.server.model.tables.records.HwmmeRecord;
import id.mit.chrono.server.model.tables.records.HwncellRecord;
import id.mit.chrono.server.model.tables.records.HwnodebRecord;
import id.mit.chrono.server.model.tables.records.HwrncRecord;
import id.mit.chrono.server.model.tables.records.HwucellRecord;
import id.mit.chrono.server.model.tables.records.InventoryRecord;
import id.mit.chrono.server.model.tables.records.InventoryfieldvalidationRecord;
import id.mit.chrono.server.model.tables.records.InventorytypeRecord;
import id.mit.chrono.server.model.tables.records.LacimarejectRecord;
import id.mit.chrono.server.model.tables.records.MTempsysinfo2gRecord;
import id.mit.chrono.server.model.tables.records.MTempsysinfo3gRecord;
import id.mit.chrono.server.model.tables.records.MTempsysinfo4gRecord;
import id.mit.chrono.server.model.tables.records.NokbscRecord;
import id.mit.chrono.server.model.tables.records.NokbtsRecord;
import id.mit.chrono.server.model.tables.records.NokenodebRecord;
import id.mit.chrono.server.model.tables.records.NokgcellRecord;
import id.mit.chrono.server.model.tables.records.NokgtrxRecord;
import id.mit.chrono.server.model.tables.records.NokinventoryRecord;
import id.mit.chrono.server.model.tables.records.NoklcellRecord;
import id.mit.chrono.server.model.tables.records.NokmmeRecord;
import id.mit.chrono.server.model.tables.records.NoknodebRecord;
import id.mit.chrono.server.model.tables.records.NokrncRecord;
import id.mit.chrono.server.model.tables.records.NokucellRecord;
import id.mit.chrono.server.model.tables.records.StylogcellRecord;
import id.mit.chrono.server.model.tables.records.StylolcellRecord;
import id.mit.chrono.server.model.tables.records.StyloucellRecord;
import id.mit.chrono.server.model.tables.records.TempCrsiteRecord;
import id.mit.chrono.server.model.tables.records.TempCrstaticCopyRecord;
import id.mit.chrono.server.model.tables.records.TempCrstaticRecord;
import id.mit.chrono.server.model.tables.records.TempRecord;
import id.mit.chrono.server.model.tables.records.TempXxxRecord;
import id.mit.chrono.server.model.tables.records.ZtebscRecord;
import id.mit.chrono.server.model.tables.records.ZtebscemlppuserpriorityRecord;
import id.mit.chrono.server.model.tables.records.ZtebscextgcellRecord;
import id.mit.chrono.server.model.tables.records.ZtebscextgcellXRecord;
import id.mit.chrono.server.model.tables.records.ZtebscextlcellRecord;
import id.mit.chrono.server.model.tables.records.ZtebscextlcellXRecord;
import id.mit.chrono.server.model.tables.records.ZtebscextucellRecord;
import id.mit.chrono.server.model.tables.records.ZtebscextucellXRecord;
import id.mit.chrono.server.model.tables.records.ZtebsclocareaRecord;
import id.mit.chrono.server.model.tables.records.ZtebscroutingareaRecord;
import id.mit.chrono.server.model.tables.records.ZtebtsRecord;
import id.mit.chrono.server.model.tables.records.ZteenodebRecord;
import id.mit.chrono.server.model.tables.records.ZtegcellRecord;
import id.mit.chrono.server.model.tables.records.ZtegcellbvcRecord;
import id.mit.chrono.server.model.tables.records.ZtegcellpsusrandsrvtypeRecord;
import id.mit.chrono.server.model.tables.records.ZtegcellrelgcellRecord;
import id.mit.chrono.server.model.tables.records.ZtegcellrellcellRecord;
import id.mit.chrono.server.model.tables.records.ZtegcellrelucellRecord;
import id.mit.chrono.server.model.tables.records.ZtegnodebRecord;
import id.mit.chrono.server.model.tables.records.ZtegtrxRecord;
import id.mit.chrono.server.model.tables.records.ZtegtsRecord;
import id.mit.chrono.server.model.tables.records.ZteinventoryRecord;
import id.mit.chrono.server.model.tables.records.ZteinventoryvalidationRecord;
import id.mit.chrono.server.model.tables.records.ZtelcellRecord;
import id.mit.chrono.server.model.tables.records.ZtemmeRecord;
import id.mit.chrono.server.model.tables.records.ZtencellRecord;
import id.mit.chrono.server.model.tables.records.ZtenodebRecord;
import id.mit.chrono.server.model.tables.records.ZterncRecord;
import id.mit.chrono.server.model.tables.records.ZteucellRecord;

import javax.annotation.Generated;

import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>chrono</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ColumnsetRecord> KEY_COLUMNSET_PRIMARY = UniqueKeys0.KEY_COLUMNSET_PRIMARY;
    public static final UniqueKey<CrantennaRecord> KEY_CRANTENNA_PRIMARY = UniqueKeys0.KEY_CRANTENNA_PRIMARY;
    public static final UniqueKey<CrantennaRecord> KEY_CRANTENNA_ANTENNA_SITEOPERATORASSET = UniqueKeys0.KEY_CRANTENNA_ANTENNA_SITEOPERATORASSET;
    public static final UniqueKey<CrantennatypeRecord> KEY_CRANTENNATYPE_PRIMARY = UniqueKeys0.KEY_CRANTENNATYPE_PRIMARY;
    public static final UniqueKey<CrappvarRecord> KEY_CRAPPVAR_PRIMARY = UniqueKeys0.KEY_CRAPPVAR_PRIMARY;
    public static final UniqueKey<CrbrandRecord> KEY_CRBRAND_PRIMARY = UniqueKeys0.KEY_CRBRAND_PRIMARY;
    public static final UniqueKey<CrcellRecord> KEY_CRCELL_PRIMARY = UniqueKeys0.KEY_CRCELL_PRIMARY;
    public static final UniqueKey<CrcellclassRecord> KEY_CRCELLCLASS_PRIMARY = UniqueKeys0.KEY_CRCELLCLASS_PRIMARY;
    public static final UniqueKey<CrcellclassgroupRecord> KEY_CRCELLCLASSGROUP_PRIMARY = UniqueKeys0.KEY_CRCELLCLASSGROUP_PRIMARY;
    public static final UniqueKey<CrcellcoverageRecord> KEY_CRCELLCOVERAGE_PRIMARY = UniqueKeys0.KEY_CRCELLCOVERAGE_PRIMARY;
    public static final UniqueKey<CrcellnodeidRecord> KEY_CRCELLNODEID_PRIMARY = UniqueKeys0.KEY_CRCELLNODEID_PRIMARY;
    public static final UniqueKey<CrcellpatternRecord> KEY_CRCELLPATTERN_PRIMARY = UniqueKeys0.KEY_CRCELLPATTERN_PRIMARY;
    public static final UniqueKey<CrcellstatusRecord> KEY_CRCELLSTATUS_PRIMARY = UniqueKeys0.KEY_CRCELLSTATUS_PRIMARY;
    public static final UniqueKey<CrcollectorstatusRecord> KEY_CRCOLLECTORSTATUS_PRIMARY = UniqueKeys0.KEY_CRCOLLECTORSTATUS_PRIMARY;
    public static final UniqueKey<CrcollectortaskRecord> KEY_CRCOLLECTORTASK_PRIMARY = UniqueKeys0.KEY_CRCOLLECTORTASK_PRIMARY;
    public static final UniqueKey<CrcollectortaskRecord> KEY_CRCOLLECTORTASK_COLLECTORTASK_NAME = UniqueKeys0.KEY_CRCOLLECTORTASK_COLLECTORTASK_NAME;
    public static final UniqueKey<CrcollectortaskfilesRecord> KEY_CRCOLLECTORTASKFILES_PRIMARY = UniqueKeys0.KEY_CRCOLLECTORTASKFILES_PRIMARY;
    public static final UniqueKey<CrcollectortasksourcesRecord> KEY_CRCOLLECTORTASKSOURCES_PRIMARY = UniqueKeys0.KEY_CRCOLLECTORTASKSOURCES_PRIMARY;
    public static final UniqueKey<CrcompanyRecord> KEY_CRCOMPANY_PRIMARY = UniqueKeys0.KEY_CRCOMPANY_PRIMARY;
    public static final UniqueKey<CrcountryRecord> KEY_CRCOUNTRY_PRIMARY = UniqueKeys0.KEY_CRCOUNTRY_PRIMARY;
    public static final UniqueKey<CrdataexportRecord> KEY_CRDATAEXPORT_PRIMARY = UniqueKeys0.KEY_CRDATAEXPORT_PRIMARY;
    public static final UniqueKey<CrdataexporttaskRecord> KEY_CRDATAEXPORTTASK_PRIMARY = UniqueKeys0.KEY_CRDATAEXPORTTASK_PRIMARY;
    public static final UniqueKey<Crdataexporttask2Record> KEY_CRDATAEXPORTTASK2_PRIMARY = UniqueKeys0.KEY_CRDATAEXPORTTASK2_PRIMARY;
    public static final UniqueKey<CrdataexporttypeRecord> KEY_CRDATAEXPORTTYPE_PRIMARY = UniqueKeys0.KEY_CRDATAEXPORTTYPE_PRIMARY;
    public static final UniqueKey<CrdatagroupRecord> KEY_CRDATAGROUP_PRIMARY = UniqueKeys0.KEY_CRDATAGROUP_PRIMARY;
    public static final UniqueKey<CrdatasourceRecord> KEY_CRDATASOURCE_PRIMARY = UniqueKeys0.KEY_CRDATASOURCE_PRIMARY;
    public static final UniqueKey<CrdatasourcecommandsRecord> KEY_CRDATASOURCECOMMANDS_PRIMARY = UniqueKeys0.KEY_CRDATASOURCECOMMANDS_PRIMARY;
    public static final UniqueKey<CrdatasourcetypeRecord> KEY_CRDATASOURCETYPE_PRIMARY = UniqueKeys0.KEY_CRDATASOURCETYPE_PRIMARY;
    public static final UniqueKey<CrdatatypeRecord> KEY_CRDATATYPE_PRIMARY = UniqueKeys0.KEY_CRDATATYPE_PRIMARY;
    public static final UniqueKey<CrenodebmmeRecord> KEY_CRENODEBMME_PRIMARY = UniqueKeys0.KEY_CRENODEBMME_PRIMARY;
    public static final UniqueKey<CrfinalizertaskRecord> KEY_CRFINALIZERTASK_PRIMARY = UniqueKeys0.KEY_CRFINALIZERTASK_PRIMARY;
    public static final UniqueKey<Crfinalizertask_20201023Record> KEY_CRFINALIZERTASK_20201023_PRIMARY = UniqueKeys0.KEY_CRFINALIZERTASK_20201023_PRIMARY;
    public static final UniqueKey<CrflagRecord> KEY_CRFLAG_PRIMARY = UniqueKeys0.KEY_CRFLAG_PRIMARY;
    public static final UniqueKey<CrgeomapRecord> KEY_CRGEOMAP_OGR_FID = UniqueKeys0.KEY_CRGEOMAP_OGR_FID;
    public static final UniqueKey<Crgeomap2Record> KEY_CRGEOMAP2_OGR_FID = UniqueKeys0.KEY_CRGEOMAP2_OGR_FID;
    public static final UniqueKey<Crgeomap3Record> KEY_CRGEOMAP3_OGR_FID = UniqueKeys0.KEY_CRGEOMAP3_OGR_FID;
    public static final UniqueKey<CrislandRecord> KEY_CRISLAND_PRIMARY = UniqueKeys0.KEY_CRISLAND_PRIMARY;
    public static final UniqueKey<CrlandstatusRecord> KEY_CRLANDSTATUS_PRIMARY = UniqueKeys0.KEY_CRLANDSTATUS_PRIMARY;
    public static final UniqueKey<CrmapentityRecord> KEY_CRMAPENTITY_PRIMARY = UniqueKeys0.KEY_CRMAPENTITY_PRIMARY;
    public static final UniqueKey<CrmapfieldRecord> KEY_CRMAPFIELD_PRIMARY = UniqueKeys0.KEY_CRMAPFIELD_PRIMARY;
    public static final UniqueKey<CrmaplevelRecord> KEY_CRMAPLEVEL_PRIMARY = UniqueKeys0.KEY_CRMAPLEVEL_PRIMARY;
    public static final UniqueKey<CrmapnptqRecord> KEY_CRMAPNPTQ_PRIMARY = UniqueKeys0.KEY_CRMAPNPTQ_PRIMARY;
    public static final UniqueKey<CrmapparserRecord> KEY_CRMAPPARSER_PRIMARY = UniqueKeys0.KEY_CRMAPPARSER_PRIMARY;
    public static final UniqueKey<CrnodeRecord> KEY_CRNODE_PRIMARY = UniqueKeys0.KEY_CRNODE_PRIMARY;
    public static final UniqueKey<CrnodeRecord> KEY_CRNODE_NODE_CODE = UniqueKeys0.KEY_CRNODE_NODE_CODE;
    public static final UniqueKey<CrnodecalcRecord> KEY_CRNODECALC_PRIMARY = UniqueKeys0.KEY_CRNODECALC_PRIMARY;
    public static final UniqueKey<CrnodecalcRecord> KEY_CRNODECALC_NODE_CODE = UniqueKeys0.KEY_CRNODECALC_NODE_CODE;
    public static final UniqueKey<CrnodecategoryRecord> KEY_CRNODECATEGORY_PRIMARY = UniqueKeys0.KEY_CRNODECATEGORY_PRIMARY;
    public static final UniqueKey<CrnodemapsRecord> KEY_CRNODEMAPS_PRIMARY = UniqueKeys0.KEY_CRNODEMAPS_PRIMARY;
    public static final UniqueKey<CrnodemapsRecord> KEY_CRNODEMAPS_NODE_CODE_2 = UniqueKeys0.KEY_CRNODEMAPS_NODE_CODE_2;
    public static final UniqueKey<CrnodepatternRecord> KEY_CRNODEPATTERN_PRIMARY = UniqueKeys0.KEY_CRNODEPATTERN_PRIMARY;
    public static final UniqueKey<CrnodeplaceRecord> KEY_CRNODEPLACE_PRIMARY = UniqueKeys0.KEY_CRNODEPLACE_PRIMARY;
    public static final UniqueKey<CrnodestateRecord> KEY_CRNODESTATE_PRIMARY = UniqueKeys0.KEY_CRNODESTATE_PRIMARY;
    public static final UniqueKey<CrnodestatusRecord> KEY_CRNODESTATUS_PRIMARY = UniqueKeys0.KEY_CRNODESTATUS_PRIMARY;
    public static final UniqueKey<CrnodetypeRecord> KEY_CRNODETYPE_PRIMARY = UniqueKeys0.KEY_CRNODETYPE_PRIMARY;
    public static final UniqueKey<CrnodetypeRecord> KEY_CRNODETYPE_NODE_CODE_2 = UniqueKeys0.KEY_CRNODETYPE_NODE_CODE_2;
    public static final UniqueKey<CrnptqRecord> KEY_CRNPTQ_PRIMARY = UniqueKeys0.KEY_CRNPTQ_PRIMARY;
    public static final UniqueKey<CrobjectRecord> KEY_CROBJECT_PRIMARY = UniqueKeys0.KEY_CROBJECT_PRIMARY;
    public static final UniqueKey<CrobjectcategoryRecord> KEY_CROBJECTCATEGORY_PRIMARY = UniqueKeys0.KEY_CROBJECTCATEGORY_PRIMARY;
    public static final UniqueKey<CrprocessorstatisticRecord> KEY_CRPROCESSORSTATISTIC_PRIMARY = UniqueKeys0.KEY_CRPROCESSORSTATISTIC_PRIMARY;
    public static final UniqueKey<CrprocessortaskfilesRecord> KEY_CRPROCESSORTASKFILES_PRIMARY = UniqueKeys0.KEY_CRPROCESSORTASKFILES_PRIMARY;
    public static final UniqueKey<CrprocessstatusRecord> KEY_CRPROCESSSTATUS_PRIMARY = UniqueKeys0.KEY_CRPROCESSSTATUS_PRIMARY;
    public static final UniqueKey<CrprovinceRecord> KEY_CRPROVINCE_PRIMARY = UniqueKeys0.KEY_CRPROVINCE_PRIMARY;
    public static final UniqueKey<CrquerysetRecord> KEY_CRQUERYSET_PRIMARY = UniqueKeys0.KEY_CRQUERYSET_PRIMARY;
    public static final UniqueKey<CrranbtsRecord> KEY_CRRANBTS_PRIMARY = UniqueKeys0.KEY_CRRANBTS_PRIMARY;
    public static final UniqueKey<CrranbtsRecord> KEY_CRRANBTS_RANBTS_DATE_2 = UniqueKeys0.KEY_CRRANBTS_RANBTS_DATE_2;
    public static final UniqueKey<CrrancellRecord> KEY_CRRANCELL_PRIMARY = UniqueKeys0.KEY_CRRANCELL_PRIMARY;
    public static final UniqueKey<CrrancelladvRecord> KEY_CRRANCELLADV_PRIMARY = UniqueKeys0.KEY_CRRANCELLADV_PRIMARY;
    public static final UniqueKey<CrrancontrollerRecord> KEY_CRRANCONTROLLER_PRIMARY = UniqueKeys0.KEY_CRRANCONTROLLER_PRIMARY;
    public static final UniqueKey<CrrancontrollerRecord> KEY_CRRANCONTROLLER_RANCONTROLLER_DATE_2 = UniqueKeys0.KEY_CRRANCONTROLLER_RANCONTROLLER_DATE_2;
    public static final UniqueKey<CrrelsitesiteareaRecord> KEY_CRRELSITESITEAREA_PRIMARY = UniqueKeys0.KEY_CRRELSITESITEAREA_PRIMARY;
    public static final UniqueKey<CrrevenueclassRecord> KEY_CRREVENUECLASS_PRIMARY = UniqueKeys0.KEY_CRREVENUECLASS_PRIMARY;
    public static final UniqueKey<CrsettingsRecord> KEY_CRSETTINGS_PRIMARY = UniqueKeys0.KEY_CRSETTINGS_PRIMARY;
    public static final UniqueKey<CrsiteRecord> KEY_CRSITE_PRIMARY = UniqueKeys0.KEY_CRSITE_PRIMARY;
    public static final UniqueKey<CrsiteRecord> KEY_CRSITE_SITE_CODE_2 = UniqueKeys0.KEY_CRSITE_SITE_CODE_2;
    public static final UniqueKey<CrsiteareaRecord> KEY_CRSITEAREA_PRIMARY = UniqueKeys0.KEY_CRSITEAREA_PRIMARY;
    public static final UniqueKey<CrsiteareaOldRecord> KEY_CRSITEAREA_OLD_PRIMARY = UniqueKeys0.KEY_CRSITEAREA_OLD_PRIMARY;
    public static final UniqueKey<CrsiteflagsRecord> KEY_CRSITEFLAGS_PRIMARY = UniqueKeys0.KEY_CRSITEFLAGS_PRIMARY;
    public static final UniqueKey<CrsiteprefixRecord> KEY_CRSITEPREFIX_PRIMARY = UniqueKeys0.KEY_CRSITEPREFIX_PRIMARY;
    public static final UniqueKey<CrsitestateRecord> KEY_CRSITESTATE_PRIMARY = UniqueKeys0.KEY_CRSITESTATE_PRIMARY;
    public static final UniqueKey<CrsitetypeRecord> KEY_CRSITETYPE_PRIMARY = UniqueKeys0.KEY_CRSITETYPE_PRIMARY;
    public static final UniqueKey<CrsiteOldRecord> KEY_CRSITE_OLD_PRIMARY = UniqueKeys0.KEY_CRSITE_OLD_PRIMARY;
    public static final UniqueKey<CrsiteOldRecord> KEY_CRSITE_OLD_SITE_CODE_2 = UniqueKeys0.KEY_CRSITE_OLD_SITE_CODE_2;
    public static final UniqueKey<CrsourceparserRecord> KEY_CRSOURCEPARSER_PRIMARY = UniqueKeys0.KEY_CRSOURCEPARSER_PRIMARY;
    public static final UniqueKey<CrstaticgcellRecord> KEY_CRSTATICGCELL_PRIMARY = UniqueKeys0.KEY_CRSTATICGCELL_PRIMARY;
    public static final UniqueKey<CrstaticgcellCopyRecord> KEY_CRSTATICGCELL_COPY_PRIMARY = UniqueKeys0.KEY_CRSTATICGCELL_COPY_PRIMARY;
    public static final UniqueKey<CrstaticlcellRecord> KEY_CRSTATICLCELL_PRIMARY = UniqueKeys0.KEY_CRSTATICLCELL_PRIMARY;
    public static final UniqueKey<CrstaticlcellCopyRecord> KEY_CRSTATICLCELL_COPY_PRIMARY = UniqueKeys0.KEY_CRSTATICLCELL_COPY_PRIMARY;
    public static final UniqueKey<CrstaticucellRecord> KEY_CRSTATICUCELL_PRIMARY = UniqueKeys0.KEY_CRSTATICUCELL_PRIMARY;
    public static final UniqueKey<CrsubdistrictRecord> KEY_CRSUBDISTRICT_PRIMARY = UniqueKeys0.KEY_CRSUBDISTRICT_PRIMARY;
    public static final UniqueKey<CrsummaryareaRecord> KEY_CRSUMMARYAREA_PRIMARY = UniqueKeys0.KEY_CRSUMMARYAREA_PRIMARY;
    public static final UniqueKey<CrsummarynationRecord> KEY_CRSUMMARYNATION_PRIMARY = UniqueKeys0.KEY_CRSUMMARYNATION_PRIMARY;
    public static final UniqueKey<CrsummaryossRecord> KEY_CRSUMMARYOSS_PRIMARY = UniqueKeys0.KEY_CRSUMMARYOSS_PRIMARY;
    public static final UniqueKey<CrsummaryregionalRecord> KEY_CRSUMMARYREGIONAL_PRIMARY = UniqueKeys0.KEY_CRSUMMARYREGIONAL_PRIMARY;
    public static final UniqueKey<CrsummaryvendorRecord> KEY_CRSUMMARYVENDOR_PRIMARY = UniqueKeys0.KEY_CRSUMMARYVENDOR_PRIMARY;
    public static final UniqueKey<CrtestRecord> KEY_CRTEST_PRIMARY = UniqueKeys0.KEY_CRTEST_PRIMARY;
    public static final UniqueKey<CrtimecatalogRecord> KEY_CRTIMECATALOG_PRIMARY = UniqueKeys0.KEY_CRTIMECATALOG_PRIMARY;
    public static final UniqueKey<CrtimecatalogRecord> KEY_CRTIMECATALOG_TIMECATALOG_DATAGROUP = UniqueKeys0.KEY_CRTIMECATALOG_TIMECATALOG_DATAGROUP;
    public static final UniqueKey<CrtimezoneRecord> KEY_CRTIMEZONE_PRIMARY = UniqueKeys0.KEY_CRTIMEZONE_PRIMARY;
    public static final UniqueKey<CrvendorRecord> KEY_CRVENDOR_PRIMARY = UniqueKeys0.KEY_CRVENDOR_PRIMARY;
    public static final UniqueKey<CrvendorparamsetRecord> KEY_CRVENDORPARAMSET_PRIMARY = UniqueKeys0.KEY_CRVENDORPARAMSET_PRIMARY;
    public static final UniqueKey<CrworkflowRecord> KEY_CRWORKFLOW_PRIMARY = UniqueKeys0.KEY_CRWORKFLOW_PRIMARY;
    public static final UniqueKey<Dailysysinfo2gcompareRecord> KEY_DAILYSYSINFO2GCOMPARE_PRIMARY = UniqueKeys0.KEY_DAILYSYSINFO2GCOMPARE_PRIMARY;
    public static final UniqueKey<Dailysysinfo2gcompare2Record> KEY_DAILYSYSINFO2GCOMPARE2_PRIMARY = UniqueKeys0.KEY_DAILYSYSINFO2GCOMPARE2_PRIMARY;
    public static final UniqueKey<ErbscRecord> KEY_ERBSC_PRIMARY = UniqueKeys0.KEY_ERBSC_PRIMARY;
    public static final UniqueKey<ErbtsRecord> KEY_ERBTS_PRIMARY = UniqueKeys0.KEY_ERBTS_PRIMARY;
    public static final UniqueKey<ErenodebRecord> KEY_ERENODEB_PRIMARY = UniqueKeys0.KEY_ERENODEB_PRIMARY;
    public static final UniqueKey<ErgcellRecord> KEY_ERGCELL_PRIMARY = UniqueKeys0.KEY_ERGCELL_PRIMARY;
    public static final UniqueKey<ErgcellmapRecord> KEY_ERGCELLMAP_PRIMARY = UniqueKeys0.KEY_ERGCELLMAP_PRIMARY;
    public static final UniqueKey<ErgnodebRecord> KEY_ERGNODEB_PRIMARY = UniqueKeys0.KEY_ERGNODEB_PRIMARY;
    public static final UniqueKey<ErinventoryRecord> KEY_ERINVENTORY_PRIMARY = UniqueKeys0.KEY_ERINVENTORY_PRIMARY;
    public static final UniqueKey<Erinventory2Record> KEY_ERINVENTORY2_PRIMARY = UniqueKeys0.KEY_ERINVENTORY2_PRIMARY;
    public static final UniqueKey<ErlcellRecord> KEY_ERLCELL_PRIMARY = UniqueKeys0.KEY_ERLCELL_PRIMARY;
    public static final UniqueKey<ErmmeRecord> KEY_ERMME_PRIMARY = UniqueKeys0.KEY_ERMME_PRIMARY;
    public static final UniqueKey<ErncellRecord> KEY_ERNCELL_PRIMARY = UniqueKeys0.KEY_ERNCELL_PRIMARY;
    public static final UniqueKey<ErnodebRecord> KEY_ERNODEB_PRIMARY = UniqueKeys0.KEY_ERNODEB_PRIMARY;
    public static final UniqueKey<ErrncRecord> KEY_ERRNC_PRIMARY = UniqueKeys0.KEY_ERRNC_PRIMARY;
    public static final UniqueKey<ErucellRecord> KEY_ERUCELL_PRIMARY = UniqueKeys0.KEY_ERUCELL_PRIMARY;
    public static final UniqueKey<HwbscRecord> KEY_HWBSC_PRIMARY = UniqueKeys0.KEY_HWBSC_PRIMARY;
    public static final UniqueKey<HwbscbrdRecord> KEY_HWBSCBRD_PRIMARY = UniqueKeys0.KEY_HWBSCBRD_PRIMARY;
    public static final UniqueKey<Hwbsce1t1Record> KEY_HWBSCE1T1_PRIMARY = UniqueKeys0.KEY_HWBSCE1T1_PRIMARY;
    public static final UniqueKey<HwbscethportRecord> KEY_HWBSCETHPORT_PRIMARY = UniqueKeys0.KEY_HWBSCETHPORT_PRIMARY;
    public static final UniqueKey<HwbtsRecord> KEY_HWBTS_PRIMARY = UniqueKeys0.KEY_HWBTS_PRIMARY;
    public static final UniqueKey<HwenodebRecord> KEY_HWENODEB_PRIMARY = UniqueKeys0.KEY_HWENODEB_PRIMARY;
    public static final UniqueKey<HwgcellRecord> KEY_HWGCELL_PRIMARY = UniqueKeys0.KEY_HWGCELL_PRIMARY;
    public static final UniqueKey<HwgnodebRecord> KEY_HWGNODEB_PRIMARY = UniqueKeys0.KEY_HWGNODEB_PRIMARY;
    public static final UniqueKey<HwgtrxRecord> KEY_HWGTRX_PRIMARY = UniqueKeys0.KEY_HWGTRX_PRIMARY;
    public static final UniqueKey<HwgtrxchanRecord> KEY_HWGTRXCHAN_PRIMARY = UniqueKeys0.KEY_HWGTRXCHAN_PRIMARY;
    public static final UniqueKey<HwinventoryRecord> KEY_HWINVENTORY_PRIMARY = UniqueKeys0.KEY_HWINVENTORY_PRIMARY;
    public static final UniqueKey<HwlcellRecord> KEY_HWLCELL_PRIMARY = UniqueKeys0.KEY_HWLCELL_PRIMARY;
    public static final UniqueKey<HwmmeRecord> KEY_HWMME_PRIMARY = UniqueKeys0.KEY_HWMME_PRIMARY;
    public static final UniqueKey<HwncellRecord> KEY_HWNCELL_PRIMARY = UniqueKeys0.KEY_HWNCELL_PRIMARY;
    public static final UniqueKey<HwnodebRecord> KEY_HWNODEB_PRIMARY = UniqueKeys0.KEY_HWNODEB_PRIMARY;
    public static final UniqueKey<HwrncRecord> KEY_HWRNC_PRIMARY = UniqueKeys0.KEY_HWRNC_PRIMARY;
    public static final UniqueKey<HwucellRecord> KEY_HWUCELL_PRIMARY = UniqueKeys0.KEY_HWUCELL_PRIMARY;
    public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = UniqueKeys0.KEY_INVENTORY_PRIMARY;
    public static final UniqueKey<InventoryfieldvalidationRecord> KEY_INVENTORYFIELDVALIDATION_PRIMARY = UniqueKeys0.KEY_INVENTORYFIELDVALIDATION_PRIMARY;
    public static final UniqueKey<InventorytypeRecord> KEY_INVENTORYTYPE_PRIMARY = UniqueKeys0.KEY_INVENTORYTYPE_PRIMARY;
    public static final UniqueKey<LacimarejectRecord> KEY_LACIMAREJECT_PRIMARY = UniqueKeys0.KEY_LACIMAREJECT_PRIMARY;
    public static final UniqueKey<MTempsysinfo2gRecord> KEY_M_TEMPSYSINFO2G_PRIMARY = UniqueKeys0.KEY_M_TEMPSYSINFO2G_PRIMARY;
    public static final UniqueKey<MTempsysinfo3gRecord> KEY_M_TEMPSYSINFO3G_PRIMARY = UniqueKeys0.KEY_M_TEMPSYSINFO3G_PRIMARY;
    public static final UniqueKey<MTempsysinfo4gRecord> KEY_M_TEMPSYSINFO4G_PRIMARY = UniqueKeys0.KEY_M_TEMPSYSINFO4G_PRIMARY;
    public static final UniqueKey<NokbscRecord> KEY_NOKBSC_PRIMARY = UniqueKeys0.KEY_NOKBSC_PRIMARY;
    public static final UniqueKey<NokbtsRecord> KEY_NOKBTS_PRIMARY = UniqueKeys0.KEY_NOKBTS_PRIMARY;
    public static final UniqueKey<NokenodebRecord> KEY_NOKENODEB_PRIMARY = UniqueKeys0.KEY_NOKENODEB_PRIMARY;
    public static final UniqueKey<NokgcellRecord> KEY_NOKGCELL_PRIMARY = UniqueKeys0.KEY_NOKGCELL_PRIMARY;
    public static final UniqueKey<NokgtrxRecord> KEY_NOKGTRX_PRIMARY = UniqueKeys0.KEY_NOKGTRX_PRIMARY;
    public static final UniqueKey<NokinventoryRecord> KEY_NOKINVENTORY_PRIMARY = UniqueKeys0.KEY_NOKINVENTORY_PRIMARY;
    public static final UniqueKey<NoklcellRecord> KEY_NOKLCELL_PRIMARY = UniqueKeys0.KEY_NOKLCELL_PRIMARY;
    public static final UniqueKey<NokmmeRecord> KEY_NOKMME_PRIMARY = UniqueKeys0.KEY_NOKMME_PRIMARY;
    public static final UniqueKey<NoknodebRecord> KEY_NOKNODEB_PRIMARY = UniqueKeys0.KEY_NOKNODEB_PRIMARY;
    public static final UniqueKey<NokrncRecord> KEY_NOKRNC_PRIMARY = UniqueKeys0.KEY_NOKRNC_PRIMARY;
    public static final UniqueKey<NokucellRecord> KEY_NOKUCELL_PRIMARY = UniqueKeys0.KEY_NOKUCELL_PRIMARY;
    public static final UniqueKey<StylogcellRecord> KEY_STYLOGCELL_PRIMARY = UniqueKeys0.KEY_STYLOGCELL_PRIMARY;
    public static final UniqueKey<StylolcellRecord> KEY_STYLOLCELL_PRIMARY = UniqueKeys0.KEY_STYLOLCELL_PRIMARY;
    public static final UniqueKey<StyloucellRecord> KEY_STYLOUCELL_PRIMARY = UniqueKeys0.KEY_STYLOUCELL_PRIMARY;
    public static final UniqueKey<TempRecord> KEY_TEMP_PRIMARY = UniqueKeys0.KEY_TEMP_PRIMARY;
    public static final UniqueKey<TempCrsiteRecord> KEY_TEMP_CRSITE_SITEID = UniqueKeys0.KEY_TEMP_CRSITE_SITEID;
    public static final UniqueKey<TempCrstaticRecord> KEY_TEMP_CRSTATIC_PRIMARY = UniqueKeys0.KEY_TEMP_CRSTATIC_PRIMARY;
    public static final UniqueKey<TempCrstaticCopyRecord> KEY_TEMP_CRSTATIC_COPY_PRIMARY = UniqueKeys0.KEY_TEMP_CRSTATIC_COPY_PRIMARY;
    public static final UniqueKey<TempXxxRecord> KEY_TEMP_XXX_PRIMARY = UniqueKeys0.KEY_TEMP_XXX_PRIMARY;
    public static final UniqueKey<ZtebscRecord> KEY_ZTEBSC_PRIMARY = UniqueKeys0.KEY_ZTEBSC_PRIMARY;
    public static final UniqueKey<ZtebscemlppuserpriorityRecord> KEY_ZTEBSCEMLPPUSERPRIORITY_PRIMARY = UniqueKeys0.KEY_ZTEBSCEMLPPUSERPRIORITY_PRIMARY;
    public static final UniqueKey<ZtebscextgcellRecord> KEY_ZTEBSCEXTGCELL_PRIMARY = UniqueKeys0.KEY_ZTEBSCEXTGCELL_PRIMARY;
    public static final UniqueKey<ZtebscextgcellXRecord> KEY_ZTEBSCEXTGCELL_X_PRIMARY = UniqueKeys0.KEY_ZTEBSCEXTGCELL_X_PRIMARY;
    public static final UniqueKey<ZtebscextlcellRecord> KEY_ZTEBSCEXTLCELL_PRIMARY = UniqueKeys0.KEY_ZTEBSCEXTLCELL_PRIMARY;
    public static final UniqueKey<ZtebscextlcellXRecord> KEY_ZTEBSCEXTLCELL_X_PRIMARY = UniqueKeys0.KEY_ZTEBSCEXTLCELL_X_PRIMARY;
    public static final UniqueKey<ZtebscextucellRecord> KEY_ZTEBSCEXTUCELL_PRIMARY = UniqueKeys0.KEY_ZTEBSCEXTUCELL_PRIMARY;
    public static final UniqueKey<ZtebscextucellXRecord> KEY_ZTEBSCEXTUCELL_X_PRIMARY = UniqueKeys0.KEY_ZTEBSCEXTUCELL_X_PRIMARY;
    public static final UniqueKey<ZtebsclocareaRecord> KEY_ZTEBSCLOCAREA_PRIMARY = UniqueKeys0.KEY_ZTEBSCLOCAREA_PRIMARY;
    public static final UniqueKey<ZtebscroutingareaRecord> KEY_ZTEBSCROUTINGAREA_PRIMARY = UniqueKeys0.KEY_ZTEBSCROUTINGAREA_PRIMARY;
    public static final UniqueKey<ZtebtsRecord> KEY_ZTEBTS_PRIMARY = UniqueKeys0.KEY_ZTEBTS_PRIMARY;
    public static final UniqueKey<ZteenodebRecord> KEY_ZTEENODEB_PRIMARY = UniqueKeys0.KEY_ZTEENODEB_PRIMARY;
    public static final UniqueKey<ZtegcellRecord> KEY_ZTEGCELL_PRIMARY = UniqueKeys0.KEY_ZTEGCELL_PRIMARY;
    public static final UniqueKey<ZtegcellbvcRecord> KEY_ZTEGCELLBVC_PRIMARY = UniqueKeys0.KEY_ZTEGCELLBVC_PRIMARY;
    public static final UniqueKey<ZtegcellpsusrandsrvtypeRecord> KEY_ZTEGCELLPSUSRANDSRVTYPE_PRIMARY = UniqueKeys0.KEY_ZTEGCELLPSUSRANDSRVTYPE_PRIMARY;
    public static final UniqueKey<ZtegcellrelgcellRecord> KEY_ZTEGCELLRELGCELL_PRIMARY = UniqueKeys0.KEY_ZTEGCELLRELGCELL_PRIMARY;
    public static final UniqueKey<ZtegcellrellcellRecord> KEY_ZTEGCELLRELLCELL_PRIMARY = UniqueKeys0.KEY_ZTEGCELLRELLCELL_PRIMARY;
    public static final UniqueKey<ZtegcellrelucellRecord> KEY_ZTEGCELLRELUCELL_PRIMARY = UniqueKeys0.KEY_ZTEGCELLRELUCELL_PRIMARY;
    public static final UniqueKey<ZtegnodebRecord> KEY_ZTEGNODEB_PRIMARY = UniqueKeys0.KEY_ZTEGNODEB_PRIMARY;
    public static final UniqueKey<ZtegtrxRecord> KEY_ZTEGTRX_PRIMARY = UniqueKeys0.KEY_ZTEGTRX_PRIMARY;
    public static final UniqueKey<ZtegtsRecord> KEY_ZTEGTS_PRIMARY = UniqueKeys0.KEY_ZTEGTS_PRIMARY;
    public static final UniqueKey<ZteinventoryRecord> KEY_ZTEINVENTORY_PRIMARY = UniqueKeys0.KEY_ZTEINVENTORY_PRIMARY;
    public static final UniqueKey<ZteinventoryvalidationRecord> KEY_ZTEINVENTORYVALIDATION_PRIMARY = UniqueKeys0.KEY_ZTEINVENTORYVALIDATION_PRIMARY;
    public static final UniqueKey<ZteinventoryvalidationRecord> KEY_ZTEINVENTORYVALIDATION_UNIK = UniqueKeys0.KEY_ZTEINVENTORYVALIDATION_UNIK;
    public static final UniqueKey<ZtelcellRecord> KEY_ZTELCELL_PRIMARY = UniqueKeys0.KEY_ZTELCELL_PRIMARY;
    public static final UniqueKey<ZtemmeRecord> KEY_ZTEMME_PRIMARY = UniqueKeys0.KEY_ZTEMME_PRIMARY;
    public static final UniqueKey<ZtencellRecord> KEY_ZTENCELL_PRIMARY = UniqueKeys0.KEY_ZTENCELL_PRIMARY;
    public static final UniqueKey<ZtenodebRecord> KEY_ZTENODEB_PRIMARY = UniqueKeys0.KEY_ZTENODEB_PRIMARY;
    public static final UniqueKey<ZterncRecord> KEY_ZTERNC_PRIMARY = UniqueKeys0.KEY_ZTERNC_PRIMARY;
    public static final UniqueKey<ZteucellRecord> KEY_ZTEUCELL_PRIMARY = UniqueKeys0.KEY_ZTEUCELL_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<ColumnsetRecord> KEY_COLUMNSET_PRIMARY = Internal.createUniqueKey(Columnset.COLUMNSET, "KEY_columnset_PRIMARY", Columnset.COLUMNSET.COLUMNSET_ID);
        public static final UniqueKey<CrantennaRecord> KEY_CRANTENNA_PRIMARY = Internal.createUniqueKey(Crantenna.CRANTENNA, "KEY_crantenna_PRIMARY", Crantenna.CRANTENNA.ANTENNA_ID);
        public static final UniqueKey<CrantennaRecord> KEY_CRANTENNA_ANTENNA_SITEOPERATORASSET = Internal.createUniqueKey(Crantenna.CRANTENNA, "KEY_crantenna_antenna_siteoperatorasset", Crantenna.CRANTENNA.ANTENNA_ID);
        public static final UniqueKey<CrantennatypeRecord> KEY_CRANTENNATYPE_PRIMARY = Internal.createUniqueKey(Crantennatype.CRANTENNATYPE, "KEY_crantennatype_PRIMARY", Crantennatype.CRANTENNATYPE.ANTENNATYPE_ID);
        public static final UniqueKey<CrappvarRecord> KEY_CRAPPVAR_PRIMARY = Internal.createUniqueKey(Crappvar.CRAPPVAR, "KEY_crappvar_PRIMARY", Crappvar.CRAPPVAR.APPVAR_ID);
        public static final UniqueKey<CrbrandRecord> KEY_CRBRAND_PRIMARY = Internal.createUniqueKey(Crbrand.CRBRAND, "KEY_crbrand_PRIMARY", Crbrand.CRBRAND.BRAND_ID);
        public static final UniqueKey<CrcellRecord> KEY_CRCELL_PRIMARY = Internal.createUniqueKey(Crcell.CRCELL, "KEY_crcell_PRIMARY", Crcell.CRCELL.CELL_ID);
        public static final UniqueKey<CrcellclassRecord> KEY_CRCELLCLASS_PRIMARY = Internal.createUniqueKey(Crcellclass.CRCELLCLASS, "KEY_crcellclass_PRIMARY", Crcellclass.CRCELLCLASS.CELLCLASS_ID);
        public static final UniqueKey<CrcellclassgroupRecord> KEY_CRCELLCLASSGROUP_PRIMARY = Internal.createUniqueKey(Crcellclassgroup.CRCELLCLASSGROUP, "KEY_crcellclassgroup_PRIMARY", Crcellclassgroup.CRCELLCLASSGROUP.CELLCLASSGROUP_ID);
        public static final UniqueKey<CrcellcoverageRecord> KEY_CRCELLCOVERAGE_PRIMARY = Internal.createUniqueKey(Crcellcoverage.CRCELLCOVERAGE, "KEY_crcellcoverage_PRIMARY", Crcellcoverage.CRCELLCOVERAGE.CELLCOVERAGE_ID);
        public static final UniqueKey<CrcellnodeidRecord> KEY_CRCELLNODEID_PRIMARY = Internal.createUniqueKey(Crcellnodeid.CRCELLNODEID, "KEY_crcellnodeid_PRIMARY", Crcellnodeid.CRCELLNODEID.CELLNODEID_ID);
        public static final UniqueKey<CrcellpatternRecord> KEY_CRCELLPATTERN_PRIMARY = Internal.createUniqueKey(Crcellpattern.CRCELLPATTERN, "KEY_crcellpattern_PRIMARY", Crcellpattern.CRCELLPATTERN.CELLPATTERN_ID);
        public static final UniqueKey<CrcellstatusRecord> KEY_CRCELLSTATUS_PRIMARY = Internal.createUniqueKey(Crcellstatus.CRCELLSTATUS, "KEY_crcellstatus_PRIMARY", Crcellstatus.CRCELLSTATUS.CELLSTATUS_ID);
        public static final UniqueKey<CrcollectorstatusRecord> KEY_CRCOLLECTORSTATUS_PRIMARY = Internal.createUniqueKey(Crcollectorstatus.CRCOLLECTORSTATUS, "KEY_crcollectorstatus_PRIMARY", Crcollectorstatus.CRCOLLECTORSTATUS.COLLECTORSTATUS_ID);
        public static final UniqueKey<CrcollectortaskRecord> KEY_CRCOLLECTORTASK_PRIMARY = Internal.createUniqueKey(Crcollectortask.CRCOLLECTORTASK, "KEY_crcollectortask_PRIMARY", Crcollectortask.CRCOLLECTORTASK.COLLECTORTASK_ID);
        public static final UniqueKey<CrcollectortaskRecord> KEY_CRCOLLECTORTASK_COLLECTORTASK_NAME = Internal.createUniqueKey(Crcollectortask.CRCOLLECTORTASK, "KEY_crcollectortask_collectortask_name", Crcollectortask.CRCOLLECTORTASK.COLLECTORTASK_ID);
        public static final UniqueKey<CrcollectortaskfilesRecord> KEY_CRCOLLECTORTASKFILES_PRIMARY = Internal.createUniqueKey(Crcollectortaskfiles.CRCOLLECTORTASKFILES, "KEY_crcollectortaskfiles_PRIMARY", Crcollectortaskfiles.CRCOLLECTORTASKFILES.COLLECTORTASKFILES_ID, Crcollectortaskfiles.CRCOLLECTORTASKFILES.CRCOLLECTORTASKFILES_DATE);
        public static final UniqueKey<CrcollectortasksourcesRecord> KEY_CRCOLLECTORTASKSOURCES_PRIMARY = Internal.createUniqueKey(Crcollectortasksources.CRCOLLECTORTASKSOURCES, "KEY_crcollectortasksources_PRIMARY", Crcollectortasksources.CRCOLLECTORTASKSOURCES.COLLECTORTASKSOURCES_ID);
        public static final UniqueKey<CrcompanyRecord> KEY_CRCOMPANY_PRIMARY = Internal.createUniqueKey(Crcompany.CRCOMPANY, "KEY_crcompany_PRIMARY", Crcompany.CRCOMPANY.COMPANY_ID);
        public static final UniqueKey<CrcountryRecord> KEY_CRCOUNTRY_PRIMARY = Internal.createUniqueKey(Crcountry.CRCOUNTRY, "KEY_crcountry_PRIMARY", Crcountry.CRCOUNTRY.COUNTRY_ID);
        public static final UniqueKey<CrdataexportRecord> KEY_CRDATAEXPORT_PRIMARY = Internal.createUniqueKey(Crdataexport.CRDATAEXPORT, "KEY_crdataexport_PRIMARY", Crdataexport.CRDATAEXPORT.DATAEXPORT_ID);
        public static final UniqueKey<CrdataexporttaskRecord> KEY_CRDATAEXPORTTASK_PRIMARY = Internal.createUniqueKey(Crdataexporttask.CRDATAEXPORTTASK, "KEY_crdataexporttask_PRIMARY", Crdataexporttask.CRDATAEXPORTTASK.DATAEXPORTTASK_ID);
        public static final UniqueKey<Crdataexporttask2Record> KEY_CRDATAEXPORTTASK2_PRIMARY = Internal.createUniqueKey(Crdataexporttask2.CRDATAEXPORTTASK2, "KEY_crdataexporttask2_PRIMARY", Crdataexporttask2.CRDATAEXPORTTASK2.DATAEXPORTTASK_ID);
        public static final UniqueKey<CrdataexporttypeRecord> KEY_CRDATAEXPORTTYPE_PRIMARY = Internal.createUniqueKey(Crdataexporttype.CRDATAEXPORTTYPE, "KEY_crdataexporttype_PRIMARY", Crdataexporttype.CRDATAEXPORTTYPE.DATAEXPORTTYPE_ID);
        public static final UniqueKey<CrdatagroupRecord> KEY_CRDATAGROUP_PRIMARY = Internal.createUniqueKey(Crdatagroup.CRDATAGROUP, "KEY_crdatagroup_PRIMARY", Crdatagroup.CRDATAGROUP.DATAGROUP_ID);
        public static final UniqueKey<CrdatasourceRecord> KEY_CRDATASOURCE_PRIMARY = Internal.createUniqueKey(Crdatasource.CRDATASOURCE, "KEY_crdatasource_PRIMARY", Crdatasource.CRDATASOURCE.DATASOURCE_ID);
        public static final UniqueKey<CrdatasourcecommandsRecord> KEY_CRDATASOURCECOMMANDS_PRIMARY = Internal.createUniqueKey(Crdatasourcecommands.CRDATASOURCECOMMANDS, "KEY_crdatasourcecommands_PRIMARY", Crdatasourcecommands.CRDATASOURCECOMMANDS.DATASOURCECOMMANDS_ID);
        public static final UniqueKey<CrdatasourcetypeRecord> KEY_CRDATASOURCETYPE_PRIMARY = Internal.createUniqueKey(Crdatasourcetype.CRDATASOURCETYPE, "KEY_crdatasourcetype_PRIMARY", Crdatasourcetype.CRDATASOURCETYPE.DATASOURCETYPE_ID);
        public static final UniqueKey<CrdatatypeRecord> KEY_CRDATATYPE_PRIMARY = Internal.createUniqueKey(Crdatatype.CRDATATYPE, "KEY_crdatatype_PRIMARY", Crdatatype.CRDATATYPE.DATATYPE_ID);
        public static final UniqueKey<CrenodebmmeRecord> KEY_CRENODEBMME_PRIMARY = Internal.createUniqueKey(Crenodebmme.CRENODEBMME, "KEY_crenodebmme_PRIMARY", Crenodebmme.CRENODEBMME.ENODEBMME_ID);
        public static final UniqueKey<CrfinalizertaskRecord> KEY_CRFINALIZERTASK_PRIMARY = Internal.createUniqueKey(Crfinalizertask.CRFINALIZERTASK, "KEY_crfinalizertask_PRIMARY", Crfinalizertask.CRFINALIZERTASK.FINALIZERTASK_ID);
        public static final UniqueKey<Crfinalizertask_20201023Record> KEY_CRFINALIZERTASK_20201023_PRIMARY = Internal.createUniqueKey(Crfinalizertask_20201023.CRFINALIZERTASK_20201023, "KEY_crfinalizertask_20201023_PRIMARY", Crfinalizertask_20201023.CRFINALIZERTASK_20201023.FINALIZERTASK_ID);
        public static final UniqueKey<CrflagRecord> KEY_CRFLAG_PRIMARY = Internal.createUniqueKey(Crflag.CRFLAG, "KEY_crflag_PRIMARY", Crflag.CRFLAG.FLAG_ID);
        public static final UniqueKey<CrgeomapRecord> KEY_CRGEOMAP_OGR_FID = Internal.createUniqueKey(Crgeomap.CRGEOMAP, "KEY_crgeomap_OGR_FID", Crgeomap.CRGEOMAP.GEOMAP_ID);
        public static final UniqueKey<Crgeomap2Record> KEY_CRGEOMAP2_OGR_FID = Internal.createUniqueKey(Crgeomap2.CRGEOMAP2, "KEY_crgeomap2_OGR_FID", Crgeomap2.CRGEOMAP2.GEOMAP_ID);
        public static final UniqueKey<Crgeomap3Record> KEY_CRGEOMAP3_OGR_FID = Internal.createUniqueKey(Crgeomap3.CRGEOMAP3, "KEY_crgeomap3_OGR_FID", Crgeomap3.CRGEOMAP3.GEOMAP_ID);
        public static final UniqueKey<CrislandRecord> KEY_CRISLAND_PRIMARY = Internal.createUniqueKey(Crisland.CRISLAND, "KEY_crisland_PRIMARY", Crisland.CRISLAND.ISLAND_ID);
        public static final UniqueKey<CrlandstatusRecord> KEY_CRLANDSTATUS_PRIMARY = Internal.createUniqueKey(Crlandstatus.CRLANDSTATUS, "KEY_crlandstatus_PRIMARY", Crlandstatus.CRLANDSTATUS.LANDSTATUS_ID);
        public static final UniqueKey<CrmapentityRecord> KEY_CRMAPENTITY_PRIMARY = Internal.createUniqueKey(Crmapentity.CRMAPENTITY, "KEY_crmapentity_PRIMARY", Crmapentity.CRMAPENTITY.MAPENTITY_ID);
        public static final UniqueKey<CrmapfieldRecord> KEY_CRMAPFIELD_PRIMARY = Internal.createUniqueKey(Crmapfield.CRMAPFIELD, "KEY_crmapfield_PRIMARY", Crmapfield.CRMAPFIELD.MAPFIELD_ID);
        public static final UniqueKey<CrmaplevelRecord> KEY_CRMAPLEVEL_PRIMARY = Internal.createUniqueKey(Crmaplevel.CRMAPLEVEL, "KEY_crmaplevel_PRIMARY", Crmaplevel.CRMAPLEVEL.MAPLEVEL_ID);
        public static final UniqueKey<CrmapnptqRecord> KEY_CRMAPNPTQ_PRIMARY = Internal.createUniqueKey(Crmapnptq.CRMAPNPTQ, "KEY_crmapnptq_PRIMARY", Crmapnptq.CRMAPNPTQ.CRMAPNPTQ_ID);
        public static final UniqueKey<CrmapparserRecord> KEY_CRMAPPARSER_PRIMARY = Internal.createUniqueKey(Crmapparser.CRMAPPARSER, "KEY_crmapparser_PRIMARY", Crmapparser.CRMAPPARSER.MAPPARSER_ID);
        public static final UniqueKey<CrnodeRecord> KEY_CRNODE_PRIMARY = Internal.createUniqueKey(Crnode.CRNODE, "KEY_crnode_PRIMARY", Crnode.CRNODE.NODE_ID);
        public static final UniqueKey<CrnodeRecord> KEY_CRNODE_NODE_CODE = Internal.createUniqueKey(Crnode.CRNODE, "KEY_crnode_node_code", Crnode.CRNODE.NODE_CODE, Crnode.CRNODE.NODE_ID, Crnode.CRNODE.NODE_SITE);
        public static final UniqueKey<CrnodecalcRecord> KEY_CRNODECALC_PRIMARY = Internal.createUniqueKey(Crnodecalc.CRNODECALC, "KEY_crnodecalc_PRIMARY", Crnodecalc.CRNODECALC.NODECALC_ID);
        public static final UniqueKey<CrnodecalcRecord> KEY_CRNODECALC_NODE_CODE = Internal.createUniqueKey(Crnodecalc.CRNODECALC, "KEY_crnodecalc_node_code", Crnodecalc.CRNODECALC.NODECALC_CODE, Crnodecalc.CRNODECALC.NODECALC_ID);
        public static final UniqueKey<CrnodecategoryRecord> KEY_CRNODECATEGORY_PRIMARY = Internal.createUniqueKey(Crnodecategory.CRNODECATEGORY, "KEY_crnodecategory_PRIMARY", Crnodecategory.CRNODECATEGORY.NODECATEGORY_ID);
        public static final UniqueKey<CrnodemapsRecord> KEY_CRNODEMAPS_PRIMARY = Internal.createUniqueKey(Crnodemaps.CRNODEMAPS, "KEY_crnodemaps_PRIMARY", Crnodemaps.CRNODEMAPS.CRNODEMAPS_ID);
        public static final UniqueKey<CrnodemapsRecord> KEY_CRNODEMAPS_NODE_CODE_2 = Internal.createUniqueKey(Crnodemaps.CRNODEMAPS, "KEY_crnodemaps_node_code_2", Crnodemaps.CRNODEMAPS.CRNODEMAPS_ID);
        public static final UniqueKey<CrnodepatternRecord> KEY_CRNODEPATTERN_PRIMARY = Internal.createUniqueKey(Crnodepattern.CRNODEPATTERN, "KEY_crnodepattern_PRIMARY", Crnodepattern.CRNODEPATTERN.NODEPATTERN_ID);
        public static final UniqueKey<CrnodeplaceRecord> KEY_CRNODEPLACE_PRIMARY = Internal.createUniqueKey(Crnodeplace.CRNODEPLACE, "KEY_crnodeplace_PRIMARY", Crnodeplace.CRNODEPLACE.NODEPLACE_ID);
        public static final UniqueKey<CrnodestateRecord> KEY_CRNODESTATE_PRIMARY = Internal.createUniqueKey(Crnodestate.CRNODESTATE, "KEY_crnodestate_PRIMARY", Crnodestate.CRNODESTATE.NODESTATE_ID);
        public static final UniqueKey<CrnodestatusRecord> KEY_CRNODESTATUS_PRIMARY = Internal.createUniqueKey(Crnodestatus.CRNODESTATUS, "KEY_crnodestatus_PRIMARY", Crnodestatus.CRNODESTATUS.NODESTATUS_ID);
        public static final UniqueKey<CrnodetypeRecord> KEY_CRNODETYPE_PRIMARY = Internal.createUniqueKey(Crnodetype.CRNODETYPE, "KEY_crnodetype_PRIMARY", Crnodetype.CRNODETYPE.NODETYPE_ID);
        public static final UniqueKey<CrnodetypeRecord> KEY_CRNODETYPE_NODE_CODE_2 = Internal.createUniqueKey(Crnodetype.CRNODETYPE, "KEY_crnodetype_node_code_2", Crnodetype.CRNODETYPE.NODETYPE_ID);
        public static final UniqueKey<CrnptqRecord> KEY_CRNPTQ_PRIMARY = Internal.createUniqueKey(Crnptq.CRNPTQ, "KEY_crnptq_PRIMARY", Crnptq.CRNPTQ.NPTQ_ID);
        public static final UniqueKey<CrobjectRecord> KEY_CROBJECT_PRIMARY = Internal.createUniqueKey(Crobject.CROBJECT, "KEY_crobject_PRIMARY", Crobject.CROBJECT.CROBJECT_ID);
        public static final UniqueKey<CrobjectcategoryRecord> KEY_CROBJECTCATEGORY_PRIMARY = Internal.createUniqueKey(Crobjectcategory.CROBJECTCATEGORY, "KEY_crobjectcategory_PRIMARY", Crobjectcategory.CROBJECTCATEGORY.CROBJECTCATEGORY_ID);
        public static final UniqueKey<CrprocessorstatisticRecord> KEY_CRPROCESSORSTATISTIC_PRIMARY = Internal.createUniqueKey(Crprocessorstatistic.CRPROCESSORSTATISTIC, "KEY_crprocessorstatistic_PRIMARY", Crprocessorstatistic.CRPROCESSORSTATISTIC.PROCESSORSTATISTIC_DATE, Crprocessorstatistic.CRPROCESSORSTATISTIC.PROCESSORSTATISTIC_ID);
        public static final UniqueKey<CrprocessortaskfilesRecord> KEY_CRPROCESSORTASKFILES_PRIMARY = Internal.createUniqueKey(Crprocessortaskfiles.CRPROCESSORTASKFILES, "KEY_crprocessortaskfiles_PRIMARY", Crprocessortaskfiles.CRPROCESSORTASKFILES.CRPROCESSORTASKFILES_DATE, Crprocessortaskfiles.CRPROCESSORTASKFILES.PROCESSORTASKFILES_ID);
        public static final UniqueKey<CrprocessstatusRecord> KEY_CRPROCESSSTATUS_PRIMARY = Internal.createUniqueKey(Crprocessstatus.CRPROCESSSTATUS, "KEY_crprocessstatus_PRIMARY", Crprocessstatus.CRPROCESSSTATUS.PROCESSSTATUS_ID);
        public static final UniqueKey<CrprovinceRecord> KEY_CRPROVINCE_PRIMARY = Internal.createUniqueKey(Crprovince.CRPROVINCE, "KEY_crprovince_PRIMARY", Crprovince.CRPROVINCE.PROVINCE_ID);
        public static final UniqueKey<CrquerysetRecord> KEY_CRQUERYSET_PRIMARY = Internal.createUniqueKey(Crqueryset.CRQUERYSET, "KEY_crqueryset_PRIMARY", Crqueryset.CRQUERYSET.QUERYSET_ID);
        public static final UniqueKey<CrranbtsRecord> KEY_CRRANBTS_PRIMARY = Internal.createUniqueKey(Crranbts.CRRANBTS, "KEY_crranbts_PRIMARY", Crranbts.CRRANBTS.RANBTS_DATE, Crranbts.CRRANBTS.RANBTS_DATEFROM, Crranbts.CRRANBTS.RANBTS_ID);
        public static final UniqueKey<CrranbtsRecord> KEY_CRRANBTS_RANBTS_DATE_2 = Internal.createUniqueKey(Crranbts.CRRANBTS, "KEY_crranbts_ranbts_date_2", Crranbts.CRRANBTS.RANBTS_DATE, Crranbts.CRRANBTS.RANBTS_ID);
        public static final UniqueKey<CrrancellRecord> KEY_CRRANCELL_PRIMARY = Internal.createUniqueKey(Crrancell.CRRANCELL, "KEY_crrancell_PRIMARY", Crrancell.CRRANCELL.RANCELL_CRCOLLECTORTASKFILES, Crrancell.CRRANCELL.RANCELL_DATASOURCE, Crrancell.CRRANCELL.RANCELL_ID);
        public static final UniqueKey<CrrancelladvRecord> KEY_CRRANCELLADV_PRIMARY = Internal.createUniqueKey(Crrancelladv.CRRANCELLADV, "KEY_crrancelladv_PRIMARY", Crrancelladv.CRRANCELLADV.RANCELL_ID);
        public static final UniqueKey<CrrancontrollerRecord> KEY_CRRANCONTROLLER_PRIMARY = Internal.createUniqueKey(Crrancontroller.CRRANCONTROLLER, "KEY_crrancontroller_PRIMARY", Crrancontroller.CRRANCONTROLLER.RANCONTROLLER_DATE, Crrancontroller.CRRANCONTROLLER.RANCONTROLLER_DATEFROM, Crrancontroller.CRRANCONTROLLER.RANCONTROLLER_ID);
        public static final UniqueKey<CrrancontrollerRecord> KEY_CRRANCONTROLLER_RANCONTROLLER_DATE_2 = Internal.createUniqueKey(Crrancontroller.CRRANCONTROLLER, "KEY_crrancontroller_rancontroller_date_2", Crrancontroller.CRRANCONTROLLER.RANCONTROLLER_DATE, Crrancontroller.CRRANCONTROLLER.RANCONTROLLER_ID);
        public static final UniqueKey<CrrelsitesiteareaRecord> KEY_CRRELSITESITEAREA_PRIMARY = Internal.createUniqueKey(Crrelsitesitearea.CRRELSITESITEAREA, "KEY_crrelsitesitearea_PRIMARY", Crrelsitesitearea.CRRELSITESITEAREA.RELSITESITEAREA_ID);
        public static final UniqueKey<CrrevenueclassRecord> KEY_CRREVENUECLASS_PRIMARY = Internal.createUniqueKey(Crrevenueclass.CRREVENUECLASS, "KEY_crrevenueclass_PRIMARY", Crrevenueclass.CRREVENUECLASS.REVENUECLASS_ID);
        public static final UniqueKey<CrsettingsRecord> KEY_CRSETTINGS_PRIMARY = Internal.createUniqueKey(Crsettings.CRSETTINGS, "KEY_crsettings_PRIMARY", Crsettings.CRSETTINGS.SETTINGS_ID);
        public static final UniqueKey<CrsiteRecord> KEY_CRSITE_PRIMARY = Internal.createUniqueKey(Crsite.CRSITE, "KEY_crsite_PRIMARY", Crsite.CRSITE.SITE_ID);
        public static final UniqueKey<CrsiteRecord> KEY_CRSITE_SITE_CODE_2 = Internal.createUniqueKey(Crsite.CRSITE, "KEY_crsite_site_code_2", Crsite.CRSITE.SITE_ID);
        public static final UniqueKey<CrsiteareaRecord> KEY_CRSITEAREA_PRIMARY = Internal.createUniqueKey(Crsitearea.CRSITEAREA, "KEY_crsitearea_PRIMARY", Crsitearea.CRSITEAREA.SITEAREA_ID);
        public static final UniqueKey<CrsiteareaOldRecord> KEY_CRSITEAREA_OLD_PRIMARY = Internal.createUniqueKey(CrsiteareaOld.CRSITEAREA_OLD, "KEY_crsitearea_old_PRIMARY", CrsiteareaOld.CRSITEAREA_OLD.SITEAREA_ID);
        public static final UniqueKey<CrsiteflagsRecord> KEY_CRSITEFLAGS_PRIMARY = Internal.createUniqueKey(Crsiteflags.CRSITEFLAGS, "KEY_crsiteflags_PRIMARY", Crsiteflags.CRSITEFLAGS.SITE_FLAGS_ID);
        public static final UniqueKey<CrsiteprefixRecord> KEY_CRSITEPREFIX_PRIMARY = Internal.createUniqueKey(Crsiteprefix.CRSITEPREFIX, "KEY_crsiteprefix_PRIMARY", Crsiteprefix.CRSITEPREFIX.SITEPREFIX_ID);
        public static final UniqueKey<CrsitestateRecord> KEY_CRSITESTATE_PRIMARY = Internal.createUniqueKey(Crsitestate.CRSITESTATE, "KEY_crsitestate_PRIMARY", Crsitestate.CRSITESTATE.SITESTATE_ID);
        public static final UniqueKey<CrsitetypeRecord> KEY_CRSITETYPE_PRIMARY = Internal.createUniqueKey(Crsitetype.CRSITETYPE, "KEY_crsitetype_PRIMARY", Crsitetype.CRSITETYPE.SITETYPE_ID);
        public static final UniqueKey<CrsiteOldRecord> KEY_CRSITE_OLD_PRIMARY = Internal.createUniqueKey(CrsiteOld.CRSITE_OLD, "KEY_crsite_old_PRIMARY", CrsiteOld.CRSITE_OLD.SITE_ID);
        public static final UniqueKey<CrsiteOldRecord> KEY_CRSITE_OLD_SITE_CODE_2 = Internal.createUniqueKey(CrsiteOld.CRSITE_OLD, "KEY_crsite_old_site_code_2", CrsiteOld.CRSITE_OLD.SITE_ID);
        public static final UniqueKey<CrsourceparserRecord> KEY_CRSOURCEPARSER_PRIMARY = Internal.createUniqueKey(Crsourceparser.CRSOURCEPARSER, "KEY_crsourceparser_PRIMARY", Crsourceparser.CRSOURCEPARSER.SOURCEPARSER_ID);
        public static final UniqueKey<CrstaticgcellRecord> KEY_CRSTATICGCELL_PRIMARY = Internal.createUniqueKey(Crstaticgcell.CRSTATICGCELL, "KEY_crstaticgcell_PRIMARY", Crstaticgcell.CRSTATICGCELL.STATICGCELL_ID);
        public static final UniqueKey<CrstaticgcellCopyRecord> KEY_CRSTATICGCELL_COPY_PRIMARY = Internal.createUniqueKey(CrstaticgcellCopy.CRSTATICGCELL_COPY, "KEY_crstaticgcell_copy_PRIMARY", CrstaticgcellCopy.CRSTATICGCELL_COPY.STATICGCELL_ID);
        public static final UniqueKey<CrstaticlcellRecord> KEY_CRSTATICLCELL_PRIMARY = Internal.createUniqueKey(Crstaticlcell.CRSTATICLCELL, "KEY_crstaticlcell_PRIMARY", Crstaticlcell.CRSTATICLCELL.STATICLCELL_ID);
        public static final UniqueKey<CrstaticlcellCopyRecord> KEY_CRSTATICLCELL_COPY_PRIMARY = Internal.createUniqueKey(CrstaticlcellCopy.CRSTATICLCELL_COPY, "KEY_crstaticlcell_copy_PRIMARY", CrstaticlcellCopy.CRSTATICLCELL_COPY.STATICLCELL_ID);
        public static final UniqueKey<CrstaticucellRecord> KEY_CRSTATICUCELL_PRIMARY = Internal.createUniqueKey(Crstaticucell.CRSTATICUCELL, "KEY_crstaticucell_PRIMARY", Crstaticucell.CRSTATICUCELL.STATICUCELL_ID);
        public static final UniqueKey<CrsubdistrictRecord> KEY_CRSUBDISTRICT_PRIMARY = Internal.createUniqueKey(Crsubdistrict.CRSUBDISTRICT, "KEY_crsubdistrict_PRIMARY", Crsubdistrict.CRSUBDISTRICT.SUBDISTRICT_ID);
        public static final UniqueKey<CrsummaryareaRecord> KEY_CRSUMMARYAREA_PRIMARY = Internal.createUniqueKey(Crsummaryarea.CRSUMMARYAREA, "KEY_crsummaryarea_PRIMARY", Crsummaryarea.CRSUMMARYAREA.SUMMARYAREA_ID);
        public static final UniqueKey<CrsummarynationRecord> KEY_CRSUMMARYNATION_PRIMARY = Internal.createUniqueKey(Crsummarynation.CRSUMMARYNATION, "KEY_crsummarynation_PRIMARY", Crsummarynation.CRSUMMARYNATION.SUMMARYNATION_ID);
        public static final UniqueKey<CrsummaryossRecord> KEY_CRSUMMARYOSS_PRIMARY = Internal.createUniqueKey(Crsummaryoss.CRSUMMARYOSS, "KEY_crsummaryoss_PRIMARY", Crsummaryoss.CRSUMMARYOSS.SUMMARYOSS_ID);
        public static final UniqueKey<CrsummaryregionalRecord> KEY_CRSUMMARYREGIONAL_PRIMARY = Internal.createUniqueKey(Crsummaryregional.CRSUMMARYREGIONAL, "KEY_crsummaryregional_PRIMARY", Crsummaryregional.CRSUMMARYREGIONAL.SUMMARYREGIONAL_ID);
        public static final UniqueKey<CrsummaryvendorRecord> KEY_CRSUMMARYVENDOR_PRIMARY = Internal.createUniqueKey(Crsummaryvendor.CRSUMMARYVENDOR, "KEY_crsummaryvendor_PRIMARY", Crsummaryvendor.CRSUMMARYVENDOR.SUMMARYVENDOR_ID);
        public static final UniqueKey<CrtestRecord> KEY_CRTEST_PRIMARY = Internal.createUniqueKey(Crtest.CRTEST, "KEY_crtest_PRIMARY", Crtest.CRTEST.ID);
        public static final UniqueKey<CrtimecatalogRecord> KEY_CRTIMECATALOG_PRIMARY = Internal.createUniqueKey(Crtimecatalog.CRTIMECATALOG, "KEY_crtimecatalog_PRIMARY", Crtimecatalog.CRTIMECATALOG.TIMECATALOG_ID);
        public static final UniqueKey<CrtimecatalogRecord> KEY_CRTIMECATALOG_TIMECATALOG_DATAGROUP = Internal.createUniqueKey(Crtimecatalog.CRTIMECATALOG, "KEY_crtimecatalog_timecatalog_datagroup", Crtimecatalog.CRTIMECATALOG.TIMECATALOG_DATAGROUP, Crtimecatalog.CRTIMECATALOG.TIMECATALOG_ID);
        public static final UniqueKey<CrtimezoneRecord> KEY_CRTIMEZONE_PRIMARY = Internal.createUniqueKey(Crtimezone.CRTIMEZONE, "KEY_crtimezone_PRIMARY", Crtimezone.CRTIMEZONE.TIMEZONE_ID);
        public static final UniqueKey<CrvendorRecord> KEY_CRVENDOR_PRIMARY = Internal.createUniqueKey(Crvendor.CRVENDOR, "KEY_crvendor_PRIMARY", Crvendor.CRVENDOR.VENDOR_ID);
        public static final UniqueKey<CrvendorparamsetRecord> KEY_CRVENDORPARAMSET_PRIMARY = Internal.createUniqueKey(Crvendorparamset.CRVENDORPARAMSET, "KEY_crvendorparamset_PRIMARY", Crvendorparamset.CRVENDORPARAMSET.VENDORPARAMSET_ID);
        public static final UniqueKey<CrworkflowRecord> KEY_CRWORKFLOW_PRIMARY = Internal.createUniqueKey(Crworkflow.CRWORKFLOW, "KEY_crworkflow_PRIMARY", Crworkflow.CRWORKFLOW.WORKFLOW_ID);
        public static final UniqueKey<Dailysysinfo2gcompareRecord> KEY_DAILYSYSINFO2GCOMPARE_PRIMARY = Internal.createUniqueKey(Dailysysinfo2gcompare.DAILYSYSINFO2GCOMPARE, "KEY_DailySysinfo2GCompare_PRIMARY", Dailysysinfo2gcompare.DAILYSYSINFO2GCOMPARE.SOURCE);
        public static final UniqueKey<Dailysysinfo2gcompare2Record> KEY_DAILYSYSINFO2GCOMPARE2_PRIMARY = Internal.createUniqueKey(Dailysysinfo2gcompare2.DAILYSYSINFO2GCOMPARE2, "KEY_DailySysinfo2GCompare2_PRIMARY", Dailysysinfo2gcompare2.DAILYSYSINFO2GCOMPARE2.SOURCE);
        public static final UniqueKey<ErbscRecord> KEY_ERBSC_PRIMARY = Internal.createUniqueKey(Erbsc.ERBSC, "KEY_erbsc_PRIMARY", Erbsc.ERBSC.ERBSC_CRCOLLECTORTASKFILES, Erbsc.ERBSC.ERBSC_ID);
        public static final UniqueKey<ErbtsRecord> KEY_ERBTS_PRIMARY = Internal.createUniqueKey(Erbts.ERBTS, "KEY_erbts_PRIMARY", Erbts.ERBTS.ERBTS_CRCOLLECTORTASKFILES, Erbts.ERBTS.ERBTS_ID);
        public static final UniqueKey<ErenodebRecord> KEY_ERENODEB_PRIMARY = Internal.createUniqueKey(Erenodeb.ERENODEB, "KEY_erenodeb_PRIMARY", Erenodeb.ERENODEB.ERENODEB_CRCOLLECTORTASKFILES, Erenodeb.ERENODEB.ERENODEB_ID);
        public static final UniqueKey<ErgcellRecord> KEY_ERGCELL_PRIMARY = Internal.createUniqueKey(Ergcell.ERGCELL, "KEY_ergcell_PRIMARY", Ergcell.ERGCELL.ERGCELL_CRCOLLECTORTASKFILES, Ergcell.ERGCELL.ERGCELL_ID);
        public static final UniqueKey<ErgcellmapRecord> KEY_ERGCELLMAP_PRIMARY = Internal.createUniqueKey(Ergcellmap.ERGCELLMAP, "KEY_ergcellmap_PRIMARY", Ergcellmap.ERGCELLMAP.ERGCELLMAP_ID);
        public static final UniqueKey<ErgnodebRecord> KEY_ERGNODEB_PRIMARY = Internal.createUniqueKey(Ergnodeb.ERGNODEB, "KEY_ergnodeb_PRIMARY", Ergnodeb.ERGNODEB.ERGNODEB_CRCOLLECTORTASKFILES, Ergnodeb.ERGNODEB.ERGNODEB_ID);
        public static final UniqueKey<ErinventoryRecord> KEY_ERINVENTORY_PRIMARY = Internal.createUniqueKey(Erinventory.ERINVENTORY, "KEY_erinventory_PRIMARY", Erinventory.ERINVENTORY.ERINVENTORY_DATE, Erinventory.ERINVENTORY.ERINVENTORY_ID);
        public static final UniqueKey<Erinventory2Record> KEY_ERINVENTORY2_PRIMARY = Internal.createUniqueKey(Erinventory2.ERINVENTORY2, "KEY_erinventory2_PRIMARY", Erinventory2.ERINVENTORY2.ERINVENTORY_DATE, Erinventory2.ERINVENTORY2.ERINVENTORY_ID);
        public static final UniqueKey<ErlcellRecord> KEY_ERLCELL_PRIMARY = Internal.createUniqueKey(Erlcell.ERLCELL, "KEY_erlcell_PRIMARY", Erlcell.ERLCELL.ERLCELL_CRCOLLECTORTASKFILES, Erlcell.ERLCELL.ERLCELL_ID);
        public static final UniqueKey<ErmmeRecord> KEY_ERMME_PRIMARY = Internal.createUniqueKey(Ermme.ERMME, "KEY_ermme_PRIMARY", Ermme.ERMME.ERMME_CRCOLLECTORTASKFILES, Ermme.ERMME.ERMME_ID);
        public static final UniqueKey<ErncellRecord> KEY_ERNCELL_PRIMARY = Internal.createUniqueKey(Erncell.ERNCELL, "KEY_erncell_PRIMARY", Erncell.ERNCELL.ERNCELL_CRCOLLECTORTASKFILES, Erncell.ERNCELL.ERNCELL_ID);
        public static final UniqueKey<ErnodebRecord> KEY_ERNODEB_PRIMARY = Internal.createUniqueKey(Ernodeb.ERNODEB, "KEY_ernodeb_PRIMARY", Ernodeb.ERNODEB.ERNODEB_CRCOLLECTORTASKFILES, Ernodeb.ERNODEB.ERNODEB_ID);
        public static final UniqueKey<ErrncRecord> KEY_ERRNC_PRIMARY = Internal.createUniqueKey(Errnc.ERRNC, "KEY_errnc_PRIMARY", Errnc.ERRNC.ERRNC_CRCOLLECTORTASKFILES, Errnc.ERRNC.ERRNC_ID);
        public static final UniqueKey<ErucellRecord> KEY_ERUCELL_PRIMARY = Internal.createUniqueKey(Erucell.ERUCELL, "KEY_erucell_PRIMARY", Erucell.ERUCELL.ERUCELL_CRCOLLECTORTASKFILES, Erucell.ERUCELL.ERUCELL_ID);
        public static final UniqueKey<HwbscRecord> KEY_HWBSC_PRIMARY = Internal.createUniqueKey(Hwbsc.HWBSC, "KEY_hwbsc_PRIMARY", Hwbsc.HWBSC.HWBSC_CRCOLLECTORTASKFILES, Hwbsc.HWBSC.HWBSC_ID);
        public static final UniqueKey<HwbscbrdRecord> KEY_HWBSCBRD_PRIMARY = Internal.createUniqueKey(Hwbscbrd.HWBSCBRD, "KEY_hwbscbrd_PRIMARY", Hwbscbrd.HWBSCBRD.HWBSCBRD_CRCOLLECTORTASKFILES, Hwbscbrd.HWBSCBRD.HWBSCBRD_ID);
        public static final UniqueKey<Hwbsce1t1Record> KEY_HWBSCE1T1_PRIMARY = Internal.createUniqueKey(Hwbsce1t1.HWBSCE1T1, "KEY_hwbsce1t1_PRIMARY", Hwbsce1t1.HWBSCE1T1.HWBSCE1T1_CRCOLLECTORTASKFILES, Hwbsce1t1.HWBSCE1T1.HWBSCE1T1_ID);
        public static final UniqueKey<HwbscethportRecord> KEY_HWBSCETHPORT_PRIMARY = Internal.createUniqueKey(Hwbscethport.HWBSCETHPORT, "KEY_hwbscethport_PRIMARY", Hwbscethport.HWBSCETHPORT.HWBSCETHPORT_CRCOLLECTORTASKFILES, Hwbscethport.HWBSCETHPORT.HWBSCETHPORT_ID);
        public static final UniqueKey<HwbtsRecord> KEY_HWBTS_PRIMARY = Internal.createUniqueKey(Hwbts.HWBTS, "KEY_hwbts_PRIMARY", Hwbts.HWBTS.HWBTS_CRCOLLECTORTASKFILES, Hwbts.HWBTS.HWBTS_ID);
        public static final UniqueKey<HwenodebRecord> KEY_HWENODEB_PRIMARY = Internal.createUniqueKey(Hwenodeb.HWENODEB, "KEY_hwenodeb_PRIMARY", Hwenodeb.HWENODEB.HWENODEB_CRCOLLECTORTASKFILES, Hwenodeb.HWENODEB.HWENODEB_ID);
        public static final UniqueKey<HwgcellRecord> KEY_HWGCELL_PRIMARY = Internal.createUniqueKey(Hwgcell.HWGCELL, "KEY_hwgcell_PRIMARY", Hwgcell.HWGCELL.HWGCELL_CRCOLLECTORTASKFILES, Hwgcell.HWGCELL.HWGCELL_ID);
        public static final UniqueKey<HwgnodebRecord> KEY_HWGNODEB_PRIMARY = Internal.createUniqueKey(Hwgnodeb.HWGNODEB, "KEY_hwgnodeb_PRIMARY", Hwgnodeb.HWGNODEB.HWGNODEB_CRCOLLECTORTASKFILES, Hwgnodeb.HWGNODEB.HWGNODEB_ID);
        public static final UniqueKey<HwgtrxRecord> KEY_HWGTRX_PRIMARY = Internal.createUniqueKey(Hwgtrx.HWGTRX, "KEY_hwgtrx_PRIMARY", Hwgtrx.HWGTRX.HWGTRX_CRCOLLECTORTASKFILES, Hwgtrx.HWGTRX.HWGTRX_ID);
        public static final UniqueKey<HwgtrxchanRecord> KEY_HWGTRXCHAN_PRIMARY = Internal.createUniqueKey(Hwgtrxchan.HWGTRXCHAN, "KEY_hwgtrxchan_PRIMARY", Hwgtrxchan.HWGTRXCHAN.HWGTRXCHAN_CRCOLLECTORTASKFILES, Hwgtrxchan.HWGTRXCHAN.HWGTRXCHAN_ID);
        public static final UniqueKey<HwinventoryRecord> KEY_HWINVENTORY_PRIMARY = Internal.createUniqueKey(Hwinventory.HWINVENTORY, "KEY_hwinventory_PRIMARY", Hwinventory.HWINVENTORY.HWINVENTORY_DATE, Hwinventory.HWINVENTORY.HWINVENTORY_ID);
        public static final UniqueKey<HwlcellRecord> KEY_HWLCELL_PRIMARY = Internal.createUniqueKey(Hwlcell.HWLCELL, "KEY_hwlcell_PRIMARY", Hwlcell.HWLCELL.HWLCELL_CRCOLLECTORTASKFILES, Hwlcell.HWLCELL.HWLCELL_ID);
        public static final UniqueKey<HwmmeRecord> KEY_HWMME_PRIMARY = Internal.createUniqueKey(Hwmme.HWMME, "KEY_hwmme_PRIMARY", Hwmme.HWMME.HWMME_CRCOLLECTORTASKFILES, Hwmme.HWMME.HWMME_ID);
        public static final UniqueKey<HwncellRecord> KEY_HWNCELL_PRIMARY = Internal.createUniqueKey(Hwncell.HWNCELL, "KEY_hwncell_PRIMARY", Hwncell.HWNCELL.HWNCELL_CRCOLLECTORTASKFILES, Hwncell.HWNCELL.HWNCELL_ID);
        public static final UniqueKey<HwnodebRecord> KEY_HWNODEB_PRIMARY = Internal.createUniqueKey(Hwnodeb.HWNODEB, "KEY_hwnodeb_PRIMARY", Hwnodeb.HWNODEB.HWNODEB_CRCOLLECTORTASKFILES, Hwnodeb.HWNODEB.HWNODEB_ID);
        public static final UniqueKey<HwrncRecord> KEY_HWRNC_PRIMARY = Internal.createUniqueKey(Hwrnc.HWRNC, "KEY_hwrnc_PRIMARY", Hwrnc.HWRNC.HWRNC_CRCOLLECTORTASKFILES, Hwrnc.HWRNC.HWRNC_ID);
        public static final UniqueKey<HwucellRecord> KEY_HWUCELL_PRIMARY = Internal.createUniqueKey(Hwucell.HWUCELL, "KEY_hwucell_PRIMARY", Hwucell.HWUCELL.HWUCELL_CRCOLLECTORTASKFILES, Hwucell.HWUCELL.HWUCELL_ID);
        public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = Internal.createUniqueKey(Inventory.INVENTORY, "KEY_inventory_PRIMARY", Inventory.INVENTORY.INVENTORY_ID);
        public static final UniqueKey<InventoryfieldvalidationRecord> KEY_INVENTORYFIELDVALIDATION_PRIMARY = Internal.createUniqueKey(Inventoryfieldvalidation.INVENTORYFIELDVALIDATION, "KEY_inventoryfieldvalidation_PRIMARY", Inventoryfieldvalidation.INVENTORYFIELDVALIDATION.INVENTORYPARTVALIDATION_ID);
        public static final UniqueKey<InventorytypeRecord> KEY_INVENTORYTYPE_PRIMARY = Internal.createUniqueKey(Inventorytype.INVENTORYTYPE, "KEY_inventorytype_PRIMARY", Inventorytype.INVENTORYTYPE.INVENTORYTYPE_ID);
        public static final UniqueKey<LacimarejectRecord> KEY_LACIMAREJECT_PRIMARY = Internal.createUniqueKey(Lacimareject.LACIMAREJECT, "KEY_lacimareject_PRIMARY", Lacimareject.LACIMAREJECT.LACIMAREJECT_CRCOLLECTORTASKFILES, Lacimareject.LACIMAREJECT.LACIMAREJECT_ID);
        public static final UniqueKey<MTempsysinfo2gRecord> KEY_M_TEMPSYSINFO2G_PRIMARY = Internal.createUniqueKey(MTempsysinfo2g.M_TEMPSYSINFO2G, "KEY_m_tempsysinfo2G_PRIMARY", MTempsysinfo2g.M_TEMPSYSINFO2G.TEMPSYSINFO2G_ID);
        public static final UniqueKey<MTempsysinfo3gRecord> KEY_M_TEMPSYSINFO3G_PRIMARY = Internal.createUniqueKey(MTempsysinfo3g.M_TEMPSYSINFO3G, "KEY_m_tempsysinfo3G_PRIMARY", MTempsysinfo3g.M_TEMPSYSINFO3G.TEMPSYSINFO3G_ID);
        public static final UniqueKey<MTempsysinfo4gRecord> KEY_M_TEMPSYSINFO4G_PRIMARY = Internal.createUniqueKey(MTempsysinfo4g.M_TEMPSYSINFO4G, "KEY_m_tempsysinfo4G_PRIMARY", MTempsysinfo4g.M_TEMPSYSINFO4G.TEMPSYSINFO4G_ID);
        public static final UniqueKey<NokbscRecord> KEY_NOKBSC_PRIMARY = Internal.createUniqueKey(Nokbsc.NOKBSC, "KEY_nokbsc_PRIMARY", Nokbsc.NOKBSC.NOKBSC_CRCOLLECTORTASKFILES, Nokbsc.NOKBSC.NOKBSC_ID);
        public static final UniqueKey<NokbtsRecord> KEY_NOKBTS_PRIMARY = Internal.createUniqueKey(Nokbts.NOKBTS, "KEY_nokbts_PRIMARY", Nokbts.NOKBTS.NOKBTS_CRCOLLECTORTASKFILES, Nokbts.NOKBTS.NOKBTS_ID);
        public static final UniqueKey<NokenodebRecord> KEY_NOKENODEB_PRIMARY = Internal.createUniqueKey(Nokenodeb.NOKENODEB, "KEY_nokenodeb_PRIMARY", Nokenodeb.NOKENODEB.NOKENODEB_CRCOLLECTORTASKFILES, Nokenodeb.NOKENODEB.NOKENODEB_ID);
        public static final UniqueKey<NokgcellRecord> KEY_NOKGCELL_PRIMARY = Internal.createUniqueKey(Nokgcell.NOKGCELL, "KEY_nokgcell_PRIMARY", Nokgcell.NOKGCELL.NOKGCELL_CRCOLLECTORTASKFILES, Nokgcell.NOKGCELL.NOKGCELL_ID);
        public static final UniqueKey<NokgtrxRecord> KEY_NOKGTRX_PRIMARY = Internal.createUniqueKey(Nokgtrx.NOKGTRX, "KEY_nokgtrx_PRIMARY", Nokgtrx.NOKGTRX.NOKGTRX_CRCOLLECTORTASKFILES, Nokgtrx.NOKGTRX.NOKGTRX_ID);
        public static final UniqueKey<NokinventoryRecord> KEY_NOKINVENTORY_PRIMARY = Internal.createUniqueKey(Nokinventory.NOKINVENTORY, "KEY_nokinventory_PRIMARY", Nokinventory.NOKINVENTORY.NOKINVENTORY_DATE, Nokinventory.NOKINVENTORY.NOKINVENTORY_ID);
        public static final UniqueKey<NoklcellRecord> KEY_NOKLCELL_PRIMARY = Internal.createUniqueKey(Noklcell.NOKLCELL, "KEY_noklcell_PRIMARY", Noklcell.NOKLCELL.NOKLCELL_CRCOLLECTORTASKFILES, Noklcell.NOKLCELL.NOKLCELL_ID);
        public static final UniqueKey<NokmmeRecord> KEY_NOKMME_PRIMARY = Internal.createUniqueKey(Nokmme.NOKMME, "KEY_nokmme_PRIMARY", Nokmme.NOKMME.NOKMME_CRCOLLECTORTASKFILES, Nokmme.NOKMME.NOKMME_ID);
        public static final UniqueKey<NoknodebRecord> KEY_NOKNODEB_PRIMARY = Internal.createUniqueKey(Noknodeb.NOKNODEB, "KEY_noknodeb_PRIMARY", Noknodeb.NOKNODEB.NOKNODEB_CRCOLLECTORTASKFILES, Noknodeb.NOKNODEB.NOKNODEB_ID);
        public static final UniqueKey<NokrncRecord> KEY_NOKRNC_PRIMARY = Internal.createUniqueKey(Nokrnc.NOKRNC, "KEY_nokrnc_PRIMARY", Nokrnc.NOKRNC.NOKRNC_CRCOLLECTORTASKFILES, Nokrnc.NOKRNC.NOKRNC_ID);
        public static final UniqueKey<NokucellRecord> KEY_NOKUCELL_PRIMARY = Internal.createUniqueKey(Nokucell.NOKUCELL, "KEY_nokucell_PRIMARY", Nokucell.NOKUCELL.NOKUCELL_CRCOLLECTORTASKFILES, Nokucell.NOKUCELL.NOKUCELL_ID);
        public static final UniqueKey<StylogcellRecord> KEY_STYLOGCELL_PRIMARY = Internal.createUniqueKey(Stylogcell.STYLOGCELL, "KEY_stylogcell_PRIMARY", Stylogcell.STYLOGCELL.STYLOGCELL_CRCOLLECTORTASKFILES, Stylogcell.STYLOGCELL.STYLOGCELL_ID);
        public static final UniqueKey<StylolcellRecord> KEY_STYLOLCELL_PRIMARY = Internal.createUniqueKey(Stylolcell.STYLOLCELL, "KEY_stylolcell_PRIMARY", Stylolcell.STYLOLCELL.STYLOLCELL_CRCOLLECTORTASKFILES, Stylolcell.STYLOLCELL.STYLOLCELL_ID);
        public static final UniqueKey<StyloucellRecord> KEY_STYLOUCELL_PRIMARY = Internal.createUniqueKey(Styloucell.STYLOUCELL, "KEY_styloucell_PRIMARY", Styloucell.STYLOUCELL.STYLOUCELL_CRCOLLECTORTASKFILES, Styloucell.STYLOUCELL.STYLOUCELL_ID);
        public static final UniqueKey<TempRecord> KEY_TEMP_PRIMARY = Internal.createUniqueKey(Temp.TEMP, "KEY_temp_PRIMARY", Temp.TEMP.DATA);
        public static final UniqueKey<TempCrsiteRecord> KEY_TEMP_CRSITE_SITEID = Internal.createUniqueKey(TempCrsite.TEMP_CRSITE, "KEY_temp_crsite_siteid", TempCrsite.TEMP_CRSITE.REGIONAL);
        public static final UniqueKey<TempCrstaticRecord> KEY_TEMP_CRSTATIC_PRIMARY = Internal.createUniqueKey(TempCrstatic.TEMP_CRSTATIC, "KEY_temp_crstatic_PRIMARY", TempCrstatic.TEMP_CRSTATIC.ID);
        public static final UniqueKey<TempCrstaticCopyRecord> KEY_TEMP_CRSTATIC_COPY_PRIMARY = Internal.createUniqueKey(TempCrstaticCopy.TEMP_CRSTATIC_COPY, "KEY_temp_crstatic_copy_PRIMARY", TempCrstaticCopy.TEMP_CRSTATIC_COPY.ID);
        public static final UniqueKey<TempXxxRecord> KEY_TEMP_XXX_PRIMARY = Internal.createUniqueKey(TempXxx.TEMP_XXX, "KEY_temp_xxx_PRIMARY", TempXxx.TEMP_XXX.ID);
        public static final UniqueKey<ZtebscRecord> KEY_ZTEBSC_PRIMARY = Internal.createUniqueKey(Ztebsc.ZTEBSC, "KEY_ztebsc_PRIMARY", Ztebsc.ZTEBSC.ZTEBSC_CRCOLLECTORTASKFILES, Ztebsc.ZTEBSC.ZTEBSC_ID);
        public static final UniqueKey<ZtebscemlppuserpriorityRecord> KEY_ZTEBSCEMLPPUSERPRIORITY_PRIMARY = Internal.createUniqueKey(Ztebscemlppuserpriority.ZTEBSCEMLPPUSERPRIORITY, "KEY_ztebscemlppuserpriority_PRIMARY", Ztebscemlppuserpriority.ZTEBSCEMLPPUSERPRIORITY.ZTEBSCEMLPPUSERPRIORITY_CRCOLLECTORTASKFILES, Ztebscemlppuserpriority.ZTEBSCEMLPPUSERPRIORITY.ZTEBSCEMLPPUSERPRIORITY_ID);
        public static final UniqueKey<ZtebscextgcellRecord> KEY_ZTEBSCEXTGCELL_PRIMARY = Internal.createUniqueKey(Ztebscextgcell.ZTEBSCEXTGCELL, "KEY_ztebscextgcell_PRIMARY", Ztebscextgcell.ZTEBSCEXTGCELL.ZTEBSCEXTGCELL_CRCOLLECTORTASKFILES, Ztebscextgcell.ZTEBSCEXTGCELL.ZTEBSCEXTGCELL_ID);
        public static final UniqueKey<ZtebscextgcellXRecord> KEY_ZTEBSCEXTGCELL_X_PRIMARY = Internal.createUniqueKey(ZtebscextgcellX.ZTEBSCEXTGCELL_X, "KEY_ztebscextgcell_x_PRIMARY", ZtebscextgcellX.ZTEBSCEXTGCELL_X.ZTEBSCEXTGCELL_CRCOLLECTORTASKFILES, ZtebscextgcellX.ZTEBSCEXTGCELL_X.ZTEBSCEXTGCELL_ID);
        public static final UniqueKey<ZtebscextlcellRecord> KEY_ZTEBSCEXTLCELL_PRIMARY = Internal.createUniqueKey(Ztebscextlcell.ZTEBSCEXTLCELL, "KEY_ztebscextlcell_PRIMARY", Ztebscextlcell.ZTEBSCEXTLCELL.ZTEBSCEXTLCELL_CRCOLLECTORTASKFILES, Ztebscextlcell.ZTEBSCEXTLCELL.ZTEBSCEXTLCELL_ID);
        public static final UniqueKey<ZtebscextlcellXRecord> KEY_ZTEBSCEXTLCELL_X_PRIMARY = Internal.createUniqueKey(ZtebscextlcellX.ZTEBSCEXTLCELL_X, "KEY_ztebscextlcell_x_PRIMARY", ZtebscextlcellX.ZTEBSCEXTLCELL_X.ZTEBSCEXTLCELL_CRCOLLECTORTASKFILES, ZtebscextlcellX.ZTEBSCEXTLCELL_X.ZTEBSCEXTLCELL_ID);
        public static final UniqueKey<ZtebscextucellRecord> KEY_ZTEBSCEXTUCELL_PRIMARY = Internal.createUniqueKey(Ztebscextucell.ZTEBSCEXTUCELL, "KEY_ztebscextucell_PRIMARY", Ztebscextucell.ZTEBSCEXTUCELL.ZTEBSCEXTUCELL_CRCOLLECTORTASKFILES, Ztebscextucell.ZTEBSCEXTUCELL.ZTEBSCEXTUCELL_ID);
        public static final UniqueKey<ZtebscextucellXRecord> KEY_ZTEBSCEXTUCELL_X_PRIMARY = Internal.createUniqueKey(ZtebscextucellX.ZTEBSCEXTUCELL_X, "KEY_ztebscextucell_x_PRIMARY", ZtebscextucellX.ZTEBSCEXTUCELL_X.ZTEBSCEXTUCELL_CRCOLLECTORTASKFILES, ZtebscextucellX.ZTEBSCEXTUCELL_X.ZTEBSCEXTUCELL_ID);
        public static final UniqueKey<ZtebsclocareaRecord> KEY_ZTEBSCLOCAREA_PRIMARY = Internal.createUniqueKey(Ztebsclocarea.ZTEBSCLOCAREA, "KEY_ztebsclocarea_PRIMARY", Ztebsclocarea.ZTEBSCLOCAREA.ZTEBSCLOCAREA_CRCOLLECTORTASKFILES, Ztebsclocarea.ZTEBSCLOCAREA.ZTEBSCLOCAREA_ID);
        public static final UniqueKey<ZtebscroutingareaRecord> KEY_ZTEBSCROUTINGAREA_PRIMARY = Internal.createUniqueKey(Ztebscroutingarea.ZTEBSCROUTINGAREA, "KEY_ztebscroutingarea_PRIMARY", Ztebscroutingarea.ZTEBSCROUTINGAREA.ZTEBSCROUTINGAREA_CRCOLLECTORTASKFILES, Ztebscroutingarea.ZTEBSCROUTINGAREA.ZTEBSCROUTINGAREA_ID);
        public static final UniqueKey<ZtebtsRecord> KEY_ZTEBTS_PRIMARY = Internal.createUniqueKey(Ztebts.ZTEBTS, "KEY_ztebts_PRIMARY", Ztebts.ZTEBTS.ZTEBTS_CRCOLLECTORTASKFILES, Ztebts.ZTEBTS.ZTEBTS_ID);
        public static final UniqueKey<ZteenodebRecord> KEY_ZTEENODEB_PRIMARY = Internal.createUniqueKey(Zteenodeb.ZTEENODEB, "KEY_zteenodeb_PRIMARY", Zteenodeb.ZTEENODEB.ZTEENODEB_CRCOLLECTORTASKFILES, Zteenodeb.ZTEENODEB.ZTEENODEB_ID);
        public static final UniqueKey<ZtegcellRecord> KEY_ZTEGCELL_PRIMARY = Internal.createUniqueKey(Ztegcell.ZTEGCELL, "KEY_ztegcell_PRIMARY", Ztegcell.ZTEGCELL.ZTEGCELL_CRCOLLECTORTASKFILES, Ztegcell.ZTEGCELL.ZTEGCELL_ID);
        public static final UniqueKey<ZtegcellbvcRecord> KEY_ZTEGCELLBVC_PRIMARY = Internal.createUniqueKey(Ztegcellbvc.ZTEGCELLBVC, "KEY_ztegcellbvc_PRIMARY", Ztegcellbvc.ZTEGCELLBVC.ZTEGCELLBVC_CRCOLLECTORTASKFILES, Ztegcellbvc.ZTEGCELLBVC.ZTEGCELLBVC_ID);
        public static final UniqueKey<ZtegcellpsusrandsrvtypeRecord> KEY_ZTEGCELLPSUSRANDSRVTYPE_PRIMARY = Internal.createUniqueKey(Ztegcellpsusrandsrvtype.ZTEGCELLPSUSRANDSRVTYPE, "KEY_ztegcellpsusrandsrvtype_PRIMARY", Ztegcellpsusrandsrvtype.ZTEGCELLPSUSRANDSRVTYPE.ZTEGCELLPSUSRANDSRVTYPE_CRCOLLECTORTASKFILES, Ztegcellpsusrandsrvtype.ZTEGCELLPSUSRANDSRVTYPE.ZTEGCELLPSUSRANDSRVTYPE_ID);
        public static final UniqueKey<ZtegcellrelgcellRecord> KEY_ZTEGCELLRELGCELL_PRIMARY = Internal.createUniqueKey(Ztegcellrelgcell.ZTEGCELLRELGCELL, "KEY_ztegcellrelgcell_PRIMARY", Ztegcellrelgcell.ZTEGCELLRELGCELL.ZTEGCELLRELGCELL_CRCOLLECTORTASKFILES, Ztegcellrelgcell.ZTEGCELLRELGCELL.ZTEGCELLRELGCELL_ID);
        public static final UniqueKey<ZtegcellrellcellRecord> KEY_ZTEGCELLRELLCELL_PRIMARY = Internal.createUniqueKey(Ztegcellrellcell.ZTEGCELLRELLCELL, "KEY_ztegcellrellcell_PRIMARY", Ztegcellrellcell.ZTEGCELLRELLCELL.ZTEGCELLRELLCELL_CRCOLLECTORTASKFILES, Ztegcellrellcell.ZTEGCELLRELLCELL.ZTEGCELLRELLCELL_ID);
        public static final UniqueKey<ZtegcellrelucellRecord> KEY_ZTEGCELLRELUCELL_PRIMARY = Internal.createUniqueKey(Ztegcellrelucell.ZTEGCELLRELUCELL, "KEY_ztegcellrelucell_PRIMARY", Ztegcellrelucell.ZTEGCELLRELUCELL.ZTEGCELLRELUCELL_CRCOLLECTORTASKFILES, Ztegcellrelucell.ZTEGCELLRELUCELL.ZTEGCELLRELUCELL_ID);
        public static final UniqueKey<ZtegnodebRecord> KEY_ZTEGNODEB_PRIMARY = Internal.createUniqueKey(Ztegnodeb.ZTEGNODEB, "KEY_ztegnodeb_PRIMARY", Ztegnodeb.ZTEGNODEB.ZTEGNODEB_CRCOLLECTORTASKFILES, Ztegnodeb.ZTEGNODEB.ZTEGNODEB_ID);
        public static final UniqueKey<ZtegtrxRecord> KEY_ZTEGTRX_PRIMARY = Internal.createUniqueKey(Ztegtrx.ZTEGTRX, "KEY_ztegtrx_PRIMARY", Ztegtrx.ZTEGTRX.ZTEGTRX_CRCOLLECTORTASKFILES, Ztegtrx.ZTEGTRX.ZTEGTRX_ID);
        public static final UniqueKey<ZtegtsRecord> KEY_ZTEGTS_PRIMARY = Internal.createUniqueKey(Ztegts.ZTEGTS, "KEY_ztegts_PRIMARY", Ztegts.ZTEGTS.ZTEGTS_CRCOLLECTORTASKFILES, Ztegts.ZTEGTS.ZTEGTS_ID);
        public static final UniqueKey<ZteinventoryRecord> KEY_ZTEINVENTORY_PRIMARY = Internal.createUniqueKey(Zteinventory.ZTEINVENTORY, "KEY_zteinventory_PRIMARY", Zteinventory.ZTEINVENTORY.ZTEINVENTORY_DATE, Zteinventory.ZTEINVENTORY.ZTEINVENTORY_ID);
        public static final UniqueKey<ZteinventoryvalidationRecord> KEY_ZTEINVENTORYVALIDATION_PRIMARY = Internal.createUniqueKey(Zteinventoryvalidation.ZTEINVENTORYVALIDATION, "KEY_zteinventoryvalidation_PRIMARY", Zteinventoryvalidation.ZTEINVENTORYVALIDATION.ZTEINVENTORYVALIDATION_ID);
        public static final UniqueKey<ZteinventoryvalidationRecord> KEY_ZTEINVENTORYVALIDATION_UNIK = Internal.createUniqueKey(Zteinventoryvalidation.ZTEINVENTORYVALIDATION, "KEY_zteinventoryvalidation_unik", Zteinventoryvalidation.ZTEINVENTORYVALIDATION.ZTEINVENTORYVALIDATION_DATE, Zteinventoryvalidation.ZTEINVENTORYVALIDATION.ZTEINVENTORYVALIDATION_ID);
        public static final UniqueKey<ZtelcellRecord> KEY_ZTELCELL_PRIMARY = Internal.createUniqueKey(Ztelcell.ZTELCELL, "KEY_ztelcell_PRIMARY", Ztelcell.ZTELCELL.ZTELCELL_CRCOLLECTORTASKFILES, Ztelcell.ZTELCELL.ZTELCELL_ID);
        public static final UniqueKey<ZtemmeRecord> KEY_ZTEMME_PRIMARY = Internal.createUniqueKey(Ztemme.ZTEMME, "KEY_ztemme_PRIMARY", Ztemme.ZTEMME.ZTEMME_CRCOLLECTORTASKFILES, Ztemme.ZTEMME.ZTEMME_ID);
        public static final UniqueKey<ZtencellRecord> KEY_ZTENCELL_PRIMARY = Internal.createUniqueKey(Ztencell.ZTENCELL, "KEY_ztencell_PRIMARY", Ztencell.ZTENCELL.ZTENCELL_CRCOLLECTORTASKFILES, Ztencell.ZTENCELL.ZTENCELL_ID);
        public static final UniqueKey<ZtenodebRecord> KEY_ZTENODEB_PRIMARY = Internal.createUniqueKey(Ztenodeb.ZTENODEB, "KEY_ztenodeb_PRIMARY", Ztenodeb.ZTENODEB.ZTENODEB_CRCOLLECTORTASKFILES, Ztenodeb.ZTENODEB.ZTENODEB_ID);
        public static final UniqueKey<ZterncRecord> KEY_ZTERNC_PRIMARY = Internal.createUniqueKey(Zternc.ZTERNC, "KEY_zternc_PRIMARY", Zternc.ZTERNC.ZTERNC_CRCOLLECTORTASKFILES, Zternc.ZTERNC.ZTERNC_ID);
        public static final UniqueKey<ZteucellRecord> KEY_ZTEUCELL_PRIMARY = Internal.createUniqueKey(Zteucell.ZTEUCELL, "KEY_zteucell_PRIMARY", Zteucell.ZTEUCELL.ZTEUCELL_CRCOLLECTORTASKFILES, Zteucell.ZTEUCELL.ZTEUCELL_ID);
    }
}
