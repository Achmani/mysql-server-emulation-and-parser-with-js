/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrdatatypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crdatatype extends TableImpl<CrdatatypeRecord> {

    private static final long serialVersionUID = 1624339306;

    /**
     * The reference instance of <code>chrono.crdatatype</code>
     */
    public static final Crdatatype CRDATATYPE = new Crdatatype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrdatatypeRecord> getRecordType() {
        return CrdatatypeRecord.class;
    }

    /**
     * The column <code>chrono.crdatatype.datatype_id</code>.
     */
    public final TableField<CrdatatypeRecord, UInteger> DATATYPE_ID = createField("datatype_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.crdatatype.datatype_code</code>.
     */
    public final TableField<CrdatatypeRecord, String> DATATYPE_CODE = createField("datatype_code", org.jooq.impl.SQLDataType.CHAR(128), this, "");

    /**
     * The column <code>chrono.crdatatype.datatype_date</code>.
     */
    public final TableField<CrdatatypeRecord, String> DATATYPE_DATE = createField("datatype_date", org.jooq.impl.SQLDataType.CHAR(128), this, "");

    /**
     * Create a <code>chrono.crdatatype</code> table reference
     */
    public Crdatatype() {
        this(DSL.name("crdatatype"), null);
    }

    /**
     * Create an aliased <code>chrono.crdatatype</code> table reference
     */
    public Crdatatype(String alias) {
        this(DSL.name(alias), CRDATATYPE);
    }

    /**
     * Create an aliased <code>chrono.crdatatype</code> table reference
     */
    public Crdatatype(Name alias) {
        this(alias, CRDATATYPE);
    }

    private Crdatatype(Name alias, Table<CrdatatypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crdatatype(Name alias, Table<CrdatatypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrdatatypeRecord> getPrimaryKey() {
        return Keys.KEY_CRDATATYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrdatatypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CrdatatypeRecord>>asList(Keys.KEY_CRDATATYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crdatatype as(String alias) {
        return new Crdatatype(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crdatatype as(Name alias) {
        return new Crdatatype(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crdatatype rename(String name) {
        return new Crdatatype(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crdatatype rename(Name name) {
        return new Crdatatype(name, null);
    }
}
