/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Indexes;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrnodepatternRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crnodepattern extends TableImpl<CrnodepatternRecord> {

    private static final long serialVersionUID = -1674565357;

    /**
     * The reference instance of <code>chrono.crnodepattern</code>
     */
    public static final Crnodepattern CRNODEPATTERN = new Crnodepattern();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrnodepatternRecord> getRecordType() {
        return CrnodepatternRecord.class;
    }

    /**
     * The column <code>chrono.crnodepattern.nodepattern_id</code>.
     */
    public final TableField<CrnodepatternRecord, Integer> NODEPATTERN_ID = createField("nodepattern_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_vendor</code>.
     */
    public final TableField<CrnodepatternRecord, Integer> NODEPATTERN_VENDOR = createField("nodepattern_vendor", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_nodecategory</code>.
     */
    public final TableField<CrnodepatternRecord, Integer> NODEPATTERN_NODECATEGORY = createField("nodepattern_nodecategory", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_order</code>.
     */
    public final TableField<CrnodepatternRecord, Integer> NODEPATTERN_ORDER = createField("nodepattern_order", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_pattern</code>.
     */
    public final TableField<CrnodepatternRecord, String> NODEPATTERN_PATTERN = createField("nodepattern_pattern", org.jooq.impl.SQLDataType.CHAR(255).nullable(false), this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_sitepattern</code>.
     */
    public final TableField<CrnodepatternRecord, String> NODEPATTERN_SITEPATTERN = createField("nodepattern_sitepattern", org.jooq.impl.SQLDataType.CHAR(255), this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_desc</code>.
     */
    public final TableField<CrnodepatternRecord, String> NODEPATTERN_DESC = createField("nodepattern_desc", org.jooq.impl.SQLDataType.CHAR(72), this, "");

    /**
     * The column <code>chrono.crnodepattern.nodepattern_enabled</code>.
     */
    public final TableField<CrnodepatternRecord, Byte> NODEPATTERN_ENABLED = createField("nodepattern_enabled", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>chrono.crnodepattern</code> table reference
     */
    public Crnodepattern() {
        this(DSL.name("crnodepattern"), null);
    }

    /**
     * Create an aliased <code>chrono.crnodepattern</code> table reference
     */
    public Crnodepattern(String alias) {
        this(DSL.name(alias), CRNODEPATTERN);
    }

    /**
     * Create an aliased <code>chrono.crnodepattern</code> table reference
     */
    public Crnodepattern(Name alias) {
        this(alias, CRNODEPATTERN);
    }

    private Crnodepattern(Name alias, Table<CrnodepatternRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crnodepattern(Name alias, Table<CrnodepatternRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CRNODEPATTERN_NODE_CODE, Indexes.CRNODEPATTERN_NODE_CODE_2, Indexes.CRNODEPATTERN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrnodepatternRecord> getPrimaryKey() {
        return Keys.KEY_CRNODEPATTERN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrnodepatternRecord>> getKeys() {
        return Arrays.<UniqueKey<CrnodepatternRecord>>asList(Keys.KEY_CRNODEPATTERN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnodepattern as(String alias) {
        return new Crnodepattern(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnodepattern as(Name alias) {
        return new Crnodepattern(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnodepattern rename(String name) {
        return new Crnodepattern(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnodepattern rename(Name name) {
        return new Crnodepattern(name, null);
    }
}
