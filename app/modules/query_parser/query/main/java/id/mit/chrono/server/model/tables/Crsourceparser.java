/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrsourceparserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crsourceparser extends TableImpl<CrsourceparserRecord> {

    private static final long serialVersionUID = -1430483927;

    /**
     * The reference instance of <code>chrono.crsourceparser</code>
     */
    public static final Crsourceparser CRSOURCEPARSER = new Crsourceparser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrsourceparserRecord> getRecordType() {
        return CrsourceparserRecord.class;
    }

    /**
     * The column <code>chrono.crsourceparser.sourceparser_id</code>.
     */
    public final TableField<CrsourceparserRecord, Integer> SOURCEPARSER_ID = createField("sourceparser_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_vendor</code>.
     */
    public final TableField<CrsourceparserRecord, Integer> SOURCEPARSER_VENDOR = createField("sourceparser_vendor", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_datagroup</code>.
     */
    public final TableField<CrsourceparserRecord, Integer> SOURCEPARSER_DATAGROUP = createField("sourceparser_datagroup", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_datasourcetype</code>.
     */
    public final TableField<CrsourceparserRecord, Integer> SOURCEPARSER_DATASOURCETYPE = createField("sourceparser_datasourcetype", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_pattern</code>.
     */
    public final TableField<CrsourceparserRecord, String> SOURCEPARSER_PATTERN = createField("sourceparser_pattern", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_identitypattern</code>.
     */
    public final TableField<CrsourceparserRecord, String> SOURCEPARSER_IDENTITYPATTERN = createField("sourceparser_identitypattern", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_dependencies</code>.
     */
    public final TableField<CrsourceparserRecord, String> SOURCEPARSER_DEPENDENCIES = createField("sourceparser_dependencies", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_class</code>.
     */
    public final TableField<CrsourceparserRecord, String> SOURCEPARSER_CLASS = createField("sourceparser_class", org.jooq.impl.SQLDataType.CHAR(64), this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_description</code>.
     */
    public final TableField<CrsourceparserRecord, String> SOURCEPARSER_DESCRIPTION = createField("sourceparser_description", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>chrono.crsourceparser.sourceparser_enabled</code>.
     */
    public final TableField<CrsourceparserRecord, Byte> SOURCEPARSER_ENABLED = createField("sourceparser_enabled", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>chrono.crsourceparser</code> table reference
     */
    public Crsourceparser() {
        this(DSL.name("crsourceparser"), null);
    }

    /**
     * Create an aliased <code>chrono.crsourceparser</code> table reference
     */
    public Crsourceparser(String alias) {
        this(DSL.name(alias), CRSOURCEPARSER);
    }

    /**
     * Create an aliased <code>chrono.crsourceparser</code> table reference
     */
    public Crsourceparser(Name alias) {
        this(alias, CRSOURCEPARSER);
    }

    private Crsourceparser(Name alias, Table<CrsourceparserRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crsourceparser(Name alias, Table<CrsourceparserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrsourceparserRecord> getPrimaryKey() {
        return Keys.KEY_CRSOURCEPARSER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrsourceparserRecord>> getKeys() {
        return Arrays.<UniqueKey<CrsourceparserRecord>>asList(Keys.KEY_CRSOURCEPARSER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crsourceparser as(String alias) {
        return new Crsourceparser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crsourceparser as(Name alias) {
        return new Crsourceparser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crsourceparser rename(String name) {
        return new Crsourceparser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crsourceparser rename(Name name) {
        return new Crsourceparser(name, null);
    }
}
