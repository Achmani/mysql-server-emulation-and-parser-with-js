/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Indexes;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.NokbscRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nokbsc extends TableImpl<NokbscRecord> {

    private static final long serialVersionUID = 308473719;

    /**
     * The reference instance of <code>chrono.nokbsc</code>
     */
    public static final Nokbsc NOKBSC = new Nokbsc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NokbscRecord> getRecordType() {
        return NokbscRecord.class;
    }

    /**
     * The column <code>chrono.nokbsc.nokbsc_id</code>.
     */
    public final TableField<NokbscRecord, ULong> NOKBSC_ID = createField("nokbsc_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.nokbsc.nokbsc_crcollectortaskfiles</code>.
     */
    public final TableField<NokbscRecord, ULong> NOKBSC_CRCOLLECTORTASKFILES = createField("nokbsc_crcollectortaskfiles", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>chrono.nokbsc.nokbsc_date</code>.
     */
    public final TableField<NokbscRecord, UInteger> NOKBSC_DATE = createField("nokbsc_date", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.nokbsc.nokbsc_datefrom</code>.
     */
    public final TableField<NokbscRecord, UInteger> NOKBSC_DATEFROM = createField("nokbsc_datefrom", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>chrono.nokbsc.nokbsc_node</code>.
     */
    public final TableField<NokbscRecord, Integer> NOKBSC_NODE = createField("nokbsc_node", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.nokbsc_vendor</code>.
     */
    public final TableField<NokbscRecord, Integer> NOKBSC_VENDOR = createField("nokbsc_vendor", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.BSCNAME</code>.
     */
    public final TableField<NokbscRecord, String> BSCNAME = createField("BSCNAME", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>chrono.nokbsc.TOTALSUBRACK</code>.
     */
    public final TableField<NokbscRecord, Integer> TOTALSUBRACK = createField("TOTALSUBRACK", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.TOTALBRD</code>.
     */
    public final TableField<NokbscRecord, Integer> TOTALBRD = createField("TOTALBRD", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.TOTALBTS</code>.
     */
    public final TableField<NokbscRecord, Integer> TOTALBTS = createField("TOTALBTS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.TOTALTRXCAP</code>.
     */
    public final TableField<NokbscRecord, Integer> TOTALTRXCAP = createField("TOTALTRXCAP", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.TOTALTRX</code>.
     */
    public final TableField<NokbscRecord, Integer> TOTALTRX = createField("TOTALTRX", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.TRXOCCUP</code>.
     */
    public final TableField<NokbscRecord, Double> TRXOCCUP = createField("TRXOCCUP", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>chrono.nokbsc.TOTALCELL</code>.
     */
    public final TableField<NokbscRecord, Integer> TOTALCELL = createField("TOTALCELL", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.distName</code>.
     */
    public final TableField<NokbscRecord, String> DISTNAME = createField("distName", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.nokbsc.dcsMacrocellThreshold</code>.
     */
    public final TableField<NokbscRecord, String> DCSMACROCELLTHRESHOLD = createField("dcsMacrocellThreshold", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.dcsMicrocellThreshold</code>.
     */
    public final TableField<NokbscRecord, String> DCSMICROCELLTHRESHOLD = createField("dcsMicrocellThreshold", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.name</code>.
     */
    public final TableField<NokbscRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.nokbsc.neSwRelease</code>.
     */
    public final TableField<NokbscRecord, String> NESWRELEASE = createField("neSwRelease", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfAf1WfqWeight</code>.
     */
    public final TableField<NokbscRecord, String> AIFAF1WFQWEIGHT = createField("AIfAf1WfqWeight", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfAf2WfqWeight</code>.
     */
    public final TableField<NokbscRecord, String> AIFAF2WFQWEIGHT = createField("AIfAf2WfqWeight", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfAf3WfqWeight</code>.
     */
    public final TableField<NokbscRecord, String> AIFAF3WFQWEIGHT = createField("AIfAf3WfqWeight", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfAf4WfqWeight</code>.
     */
    public final TableField<NokbscRecord, String> AIFAF4WFQWEIGHT = createField("AIfAf4WfqWeight", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfBeWfqWeight</code>.
     */
    public final TableField<NokbscRecord, String> AIFBEWFQWEIGHT = createField("AIfBeWfqWeight", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfCsUplaneDscpPhbTcInBss</code>.
     */
    public final TableField<NokbscRecord, String> AIFCSUPLANEDSCPPHBTCINBSS = createField("AIfCsUplaneDscpPhbTcInBss", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.AIfCsUplaneDscpPhbTcInMgw</code>.
     */
    public final TableField<NokbscRecord, String> AIFCSUPLANEDSCPPHBTCINMGW = createField("AIfCsUplaneDscpPhbTcInMgw", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.adjCellFreqsInMeasBAInfo</code>.
     */
    public final TableField<NokbscRecord, String> ADJCELLFREQSINMEASBAINFO = createField("adjCellFreqsInMeasBAInfo", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.bscType</code>.
     */
    public final TableField<NokbscRecord, String> BSCTYPE = createField("bscType", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxBcfCapacity</code>.
     */
    public final TableField<NokbscRecord, String> MAXBCFCAPACITY = createField("maxBcfCapacity", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxBtsCapacity</code>.
     */
    public final TableField<NokbscRecord, String> MAXBTSCAPACITY = createField("maxBtsCapacity", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxHldSdcch</code>.
     */
    public final TableField<NokbscRecord, String> MAXHLDSDCCH = createField("maxHldSdcch", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxHldTch</code>.
     */
    public final TableField<NokbscRecord, String> MAXHLDTCH = createField("maxHldTch", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxOnHiIf</code>.
     */
    public final TableField<NokbscRecord, String> MAXONHIIF = createField("maxOnHiIf", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxTchTransactionRate</code>.
     */
    public final TableField<NokbscRecord, String> MAXTCHTRANSACTIONRATE = createField("maxTchTransactionRate", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxTrxCapacityHw</code>.
     */
    public final TableField<NokbscRecord, String> MAXTRXCAPACITYHW = createField("maxTrxCapacityHw", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.maxTrxCapacityReal</code>.
     */
    public final TableField<NokbscRecord, String> MAXTRXCAPACITYREAL = createField("maxTrxCapacityReal", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokbsc.nokbsc_remark</code>.
     */
    public final TableField<NokbscRecord, String> NOKBSC_REMARK = createField("nokbsc_remark", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.nokbsc.EXTPROP1</code>.
     */
    public final TableField<NokbscRecord, Integer> EXTPROP1 = createField("EXTPROP1", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokbsc.EXTPROP2</code>.
     */
    public final TableField<NokbscRecord, String> EXTPROP2 = createField("EXTPROP2", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * Create a <code>chrono.nokbsc</code> table reference
     */
    public Nokbsc() {
        this(DSL.name("nokbsc"), null);
    }

    /**
     * Create an aliased <code>chrono.nokbsc</code> table reference
     */
    public Nokbsc(String alias) {
        this(DSL.name(alias), NOKBSC);
    }

    /**
     * Create an aliased <code>chrono.nokbsc</code> table reference
     */
    public Nokbsc(Name alias) {
        this(alias, NOKBSC);
    }

    private Nokbsc(Name alias, Table<NokbscRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nokbsc(Name alias, Table<NokbscRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOKBSC_HWMBSC_DATE, Indexes.NOKBSC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NokbscRecord> getPrimaryKey() {
        return Keys.KEY_NOKBSC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NokbscRecord>> getKeys() {
        return Arrays.<UniqueKey<NokbscRecord>>asList(Keys.KEY_NOKBSC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nokbsc as(String alias) {
        return new Nokbsc(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nokbsc as(Name alias) {
        return new Nokbsc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nokbsc rename(String name) {
        return new Nokbsc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nokbsc rename(Name name) {
        return new Nokbsc(name, null);
    }
}
