/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Indexes;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.NoknodebRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Noknodeb extends TableImpl<NoknodebRecord> {

    private static final long serialVersionUID = 1616062004;

    /**
     * The reference instance of <code>chrono.noknodeb</code>
     */
    public static final Noknodeb NOKNODEB = new Noknodeb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoknodebRecord> getRecordType() {
        return NoknodebRecord.class;
    }

    /**
     * The column <code>chrono.noknodeb.noknodeb_id</code>.
     */
    public final TableField<NoknodebRecord, ULong> NOKNODEB_ID = createField("noknodeb_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_crcollectortaskfiles</code>.
     */
    public final TableField<NoknodebRecord, ULong> NOKNODEB_CRCOLLECTORTASKFILES = createField("noknodeb_crcollectortaskfiles", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_date</code>.
     */
    public final TableField<NoknodebRecord, UInteger> NOKNODEB_DATE = createField("noknodeb_date", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_datefrom</code>.
     */
    public final TableField<NoknodebRecord, UInteger> NOKNODEB_DATEFROM = createField("noknodeb_datefrom", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_nokrnc</code>.
     */
    public final TableField<NoknodebRecord, ULong> NOKNODEB_NOKRNC = createField("noknodeb_nokrnc", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_node</code>.
     */
    public final TableField<NoknodebRecord, Integer> NOKNODEB_NODE = createField("noknodeb_node", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_nodephysical</code>.
     */
    public final TableField<NoknodebRecord, Integer> NOKNODEB_NODEPHYSICAL = createField("noknodeb_nodephysical", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_nodestatus</code>.
     */
    public final TableField<NoknodebRecord, Integer> NOKNODEB_NODESTATUS = createField("noknodeb_nodestatus", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_revenueclass</code>.
     */
    public final TableField<NoknodebRecord, Integer> NOKNODEB_REVENUECLASS = createField("noknodeb_revenueclass", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_vendor</code>.
     */
    public final TableField<NoknodebRecord, Integer> NOKNODEB_VENDOR = createField("noknodeb_vendor", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_namingvalid</code>.
     */
    public final TableField<NoknodebRecord, Byte> NOKNODEB_NAMINGVALID = createField("noknodeb_namingvalid", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>chrono.noknodeb.TOTALCELL</code>.
     */
    public final TableField<NoknodebRecord, Integer> TOTALCELL = createField("TOTALCELL", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.NODEBNAME</code>.
     */
    public final TableField<NoknodebRecord, String> NODEBNAME = createField("NODEBNAME", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.noknodeb.NODEBID</code>.
     */
    public final TableField<NoknodebRecord, Integer> NODEBID = createField("NODEBID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.distName</code>.
     */
    public final TableField<NoknodebRecord, String> DISTNAME = createField("distName", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.noknodeb.version</code>.
     */
    public final TableField<NoknodebRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.noknodeb.siteId</code>.
     */
    public final TableField<NoknodebRecord, String> SITEID = createField("siteId", org.jooq.impl.SQLDataType.CHAR(64), this, "");

    /**
     * The column <code>chrono.noknodeb.siteCId</code>.
     */
    public final TableField<NoknodebRecord, String> SITECID = createField("siteCId", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.noknodeb.name</code>.
     */
    public final TableField<NoknodebRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.noknodeb.ATMInterfaceID</code>.
     */
    public final TableField<NoknodebRecord, String> ATMINTERFACEID = createField("ATMInterfaceID", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.noknodeb.BTSIPAddress</code>.
     */
    public final TableField<NoknodebRecord, String> BTSIPADDRESS = createField("BTSIPAddress", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.noknodeb.IPBasedRouteIdIub</code>.
     */
    public final TableField<NoknodebRecord, String> IPBASEDROUTEIDIUB = createField("IPBasedRouteIdIub", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.noknodeb.IPNBId</code>.
     */
    public final TableField<NoknodebRecord, String> IPNBID = createField("IPNBId", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.noknodeb.BTSSupportForHSPACM</code>.
     */
    public final TableField<NoknodebRecord, String> BTSSUPPORTFORHSPACM = createField("BTSSupportForHSPACM", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.noknodeb.WBTSName</code>.
     */
    public final TableField<NoknodebRecord, String> WBTSNAME = createField("WBTSName", org.jooq.impl.SQLDataType.CHAR(64), this, "");

    /**
     * The column <code>chrono.noknodeb.WBTSSWBuildId</code>.
     */
    public final TableField<NoknodebRecord, String> WBTSSWBUILDID = createField("WBTSSWBuildId", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>chrono.noknodeb.noknodeb_remark</code>.
     */
    public final TableField<NoknodebRecord, String> NOKNODEB_REMARK = createField("noknodeb_remark", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.noknodeb.longitude</code>.
     */
    public final TableField<NoknodebRecord, String> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.noknodeb.latitude</code>.
     */
    public final TableField<NoknodebRecord, String> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.noknodeb.MaxDLPowerCapability</code>.
     */
    public final TableField<NoknodebRecord, String> MAXDLPOWERCAPABILITY = createField("MaxDLPowerCapability", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.noknodeb.EXTPROP1</code>.
     */
    public final TableField<NoknodebRecord, Integer> EXTPROP1 = createField("EXTPROP1", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.noknodeb.EXTPROP2</code>.
     */
    public final TableField<NoknodebRecord, String> EXTPROP2 = createField("EXTPROP2", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * Create a <code>chrono.noknodeb</code> table reference
     */
    public Noknodeb() {
        this(DSL.name("noknodeb"), null);
    }

    /**
     * Create an aliased <code>chrono.noknodeb</code> table reference
     */
    public Noknodeb(String alias) {
        this(DSL.name(alias), NOKNODEB);
    }

    /**
     * Create an aliased <code>chrono.noknodeb</code> table reference
     */
    public Noknodeb(Name alias) {
        this(alias, NOKNODEB);
    }

    private Noknodeb(Name alias, Table<NoknodebRecord> aliased) {
        this(alias, aliased, null);
    }

    private Noknodeb(Name alias, Table<NoknodebRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOKNODEB_HWBTS_DATE, Indexes.NOKNODEB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NoknodebRecord> getPrimaryKey() {
        return Keys.KEY_NOKNODEB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NoknodebRecord>> getKeys() {
        return Arrays.<UniqueKey<NoknodebRecord>>asList(Keys.KEY_NOKNODEB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Noknodeb as(String alias) {
        return new Noknodeb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Noknodeb as(Name alias) {
        return new Noknodeb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Noknodeb rename(String name) {
        return new Noknodeb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Noknodeb rename(Name name) {
        return new Noknodeb(name, null);
    }
}
