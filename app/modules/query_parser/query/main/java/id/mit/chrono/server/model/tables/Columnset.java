/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.ColumnsetRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Columnset extends TableImpl<ColumnsetRecord> {

    private static final long serialVersionUID = -554918845;

    /**
     * The reference instance of <code>chrono.columnset</code>
     */
    public static final Columnset COLUMNSET = new Columnset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnsetRecord> getRecordType() {
        return ColumnsetRecord.class;
    }

    /**
     * The column <code>chrono.columnset.columnset_id</code>.
     */
    public final TableField<ColumnsetRecord, Integer> COLUMNSET_ID = createField("columnset_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chrono.columnset.columnset_vendor</code>.
     */
    public final TableField<ColumnsetRecord, Integer> COLUMNSET_VENDOR = createField("columnset_vendor", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.columnset.columnset_columns</code>.
     */
    public final TableField<ColumnsetRecord, String> COLUMNSET_COLUMNS = createField("columnset_columns", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.columnset.columnset_pk</code>.
     */
    public final TableField<ColumnsetRecord, String> COLUMNSET_PK = createField("columnset_pk", org.jooq.impl.SQLDataType.CHAR(128), this, "");

    /**
     * The column <code>chrono.columnset.columnset_main_file</code>.
     */
    public final TableField<ColumnsetRecord, Integer> COLUMNSET_MAIN_FILE = createField("columnset_main_file", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>chrono.columnset</code> table reference
     */
    public Columnset() {
        this(DSL.name("columnset"), null);
    }

    /**
     * Create an aliased <code>chrono.columnset</code> table reference
     */
    public Columnset(String alias) {
        this(DSL.name(alias), COLUMNSET);
    }

    /**
     * Create an aliased <code>chrono.columnset</code> table reference
     */
    public Columnset(Name alias) {
        this(alias, COLUMNSET);
    }

    private Columnset(Name alias, Table<ColumnsetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Columnset(Name alias, Table<ColumnsetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ColumnsetRecord> getPrimaryKey() {
        return Keys.KEY_COLUMNSET_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ColumnsetRecord>> getKeys() {
        return Arrays.<UniqueKey<ColumnsetRecord>>asList(Keys.KEY_COLUMNSET_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Columnset as(String alias) {
        return new Columnset(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Columnset as(Name alias) {
        return new Columnset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Columnset rename(String name) {
        return new Columnset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Columnset rename(Name name) {
        return new Columnset(name, null);
    }
}
