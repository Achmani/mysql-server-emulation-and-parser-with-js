/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Indexes;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.NokgtrxRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nokgtrx extends TableImpl<NokgtrxRecord> {

    private static final long serialVersionUID = 617471212;

    /**
     * The reference instance of <code>chrono.nokgtrx</code>
     */
    public static final Nokgtrx NOKGTRX = new Nokgtrx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NokgtrxRecord> getRecordType() {
        return NokgtrxRecord.class;
    }

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_id</code>.
     */
    public final TableField<NokgtrxRecord, ULong> NOKGTRX_ID = createField("nokgtrx_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_crcollectortaskfiles</code>.
     */
    public final TableField<NokgtrxRecord, ULong> NOKGTRX_CRCOLLECTORTASKFILES = createField("nokgtrx_crcollectortaskfiles", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_date</code>.
     */
    public final TableField<NokgtrxRecord, UInteger> NOKGTRX_DATE = createField("nokgtrx_date", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_datefrom</code>.
     */
    public final TableField<NokgtrxRecord, UInteger> NOKGTRX_DATEFROM = createField("nokgtrx_datefrom", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_nokbsc</code>.
     */
    public final TableField<NokgtrxRecord, ULong> NOKGTRX_NOKBSC = createField("nokgtrx_nokbsc", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_nokbts</code>.
     */
    public final TableField<NokgtrxRecord, ULong> NOKGTRX_NOKBTS = createField("nokgtrx_nokbts", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_nokgcell</code>.
     */
    public final TableField<NokgtrxRecord, ULong> NOKGTRX_NOKGCELL = createField("nokgtrx_nokgcell", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>chrono.nokgtrx.distName</code>.
     */
    public final TableField<NokgtrxRecord, String> DISTNAME = createField("distName", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.nokgtrx.version</code>.
     */
    public final TableField<NokgtrxRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.CHAR(16), this, "");

    /**
     * The column <code>chrono.nokgtrx.adminState</code>.
     */
    public final TableField<NokgtrxRecord, String> ADMINSTATE = createField("adminState", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.bbUnitSupportsEdge</code>.
     */
    public final TableField<NokgtrxRecord, String> BBUNITSUPPORTSEDGE = createField("bbUnitSupportsEdge", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.gprsEnabledTrx</code>.
     */
    public final TableField<NokgtrxRecord, String> GPRSENABLEDTRX = createField("gprsEnabledTrx", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.halfRateSupport</code>.
     */
    public final TableField<NokgtrxRecord, String> HALFRATESUPPORT = createField("halfRateSupport", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.initialFrequency</code>.
     */
    public final TableField<NokgtrxRecord, String> INITIALFREQUENCY = createField("initialFrequency", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.lapdLinkName</code>.
     */
    public final TableField<NokgtrxRecord, String> LAPDLINKNAME = createField("lapdLinkName", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>chrono.nokgtrx.lapdLinkNumber</code>.
     */
    public final TableField<NokgtrxRecord, String> LAPDLINKNUMBER = createField("lapdLinkNumber", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.numberOfTrxRfPowerLevels</code>.
     */
    public final TableField<NokgtrxRecord, String> NUMBEROFTRXRFPOWERLEVELS = createField("numberOfTrxRfPowerLevels", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.preferredBcchMark</code>.
     */
    public final TableField<NokgtrxRecord, String> PREFERREDBCCHMARK = createField("preferredBcchMark", org.jooq.impl.SQLDataType.CHAR(2), this, "");

    /**
     * The column <code>chrono.nokgtrx.trxRfPower</code>.
     */
    public final TableField<NokgtrxRecord, String> TRXRFPOWER = createField("trxRfPower", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>chrono.nokgtrx.nokgtrx_remark</code>.
     */
    public final TableField<NokgtrxRecord, String> NOKGTRX_REMARK = createField("nokgtrx_remark", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel1Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL1TYPE = createField("channel1Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel2Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL2TYPE = createField("channel2Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel3Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL3TYPE = createField("channel3Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel4Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL4TYPE = createField("channel4Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel5Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL5TYPE = createField("channel5Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel6Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL6TYPE = createField("channel6Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel7Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL7TYPE = createField("channel7Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.nokgtrx.channel0Type</code>.
     */
    public final TableField<NokgtrxRecord, Integer> CHANNEL0TYPE = createField("channel0Type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>chrono.nokgtrx</code> table reference
     */
    public Nokgtrx() {
        this(DSL.name("nokgtrx"), null);
    }

    /**
     * Create an aliased <code>chrono.nokgtrx</code> table reference
     */
    public Nokgtrx(String alias) {
        this(DSL.name(alias), NOKGTRX);
    }

    /**
     * Create an aliased <code>chrono.nokgtrx</code> table reference
     */
    public Nokgtrx(Name alias) {
        this(alias, NOKGTRX);
    }

    private Nokgtrx(Name alias, Table<NokgtrxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nokgtrx(Name alias, Table<NokgtrxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOKGTRX_HWBTS_DATE, Indexes.NOKGTRX_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NokgtrxRecord> getPrimaryKey() {
        return Keys.KEY_NOKGTRX_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NokgtrxRecord>> getKeys() {
        return Arrays.<UniqueKey<NokgtrxRecord>>asList(Keys.KEY_NOKGTRX_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nokgtrx as(String alias) {
        return new Nokgtrx(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nokgtrx as(Name alias) {
        return new Nokgtrx(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nokgtrx rename(String name) {
        return new Nokgtrx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nokgtrx rename(Name name) {
        return new Nokgtrx(name, null);
    }
}
