/*
 * This file is generated by jOOQ.
*/
package id.mit.chrono.server.model.tables;


import id.mit.chrono.server.model.Chrono;
import id.mit.chrono.server.model.Indexes;
import id.mit.chrono.server.model.Keys;
import id.mit.chrono.server.model.tables.records.CrnodemapsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crnodemaps extends TableImpl<CrnodemapsRecord> {

    private static final long serialVersionUID = 1990367020;

    /**
     * The reference instance of <code>chrono.crnodemaps</code>
     */
    public static final Crnodemaps CRNODEMAPS = new Crnodemaps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrnodemapsRecord> getRecordType() {
        return CrnodemapsRecord.class;
    }

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_id</code>.
     */
    public final TableField<CrnodemapsRecord, Integer> CRNODEMAPS_ID = createField("crnodemaps_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_node</code>.
     */
    public final TableField<CrnodemapsRecord, Integer> CRNODEMAPS_NODE = createField("crnodemaps_node", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_nodename</code>.
     */
    public final TableField<CrnodemapsRecord, String> CRNODEMAPS_NODENAME = createField("crnodemaps_nodename", org.jooq.impl.SQLDataType.CHAR(96), this, "");

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_nodecategory</code>.
     */
    public final TableField<CrnodemapsRecord, Integer> CRNODEMAPS_NODECATEGORY = createField("crnodemaps_nodecategory", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_added</code>.
     */
    public final TableField<CrnodemapsRecord, Integer> CRNODEMAPS_ADDED = createField("crnodemaps_added", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_user</code>.
     */
    public final TableField<CrnodemapsRecord, Integer> CRNODEMAPS_USER = createField("crnodemaps_user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chrono.crnodemaps.crnodemaps_enabled</code>.
     */
    public final TableField<CrnodemapsRecord, Byte> CRNODEMAPS_ENABLED = createField("crnodemaps_enabled", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>chrono.crnodemaps</code> table reference
     */
    public Crnodemaps() {
        this(DSL.name("crnodemaps"), null);
    }

    /**
     * Create an aliased <code>chrono.crnodemaps</code> table reference
     */
    public Crnodemaps(String alias) {
        this(DSL.name(alias), CRNODEMAPS);
    }

    /**
     * Create an aliased <code>chrono.crnodemaps</code> table reference
     */
    public Crnodemaps(Name alias) {
        this(alias, CRNODEMAPS);
    }

    private Crnodemaps(Name alias, Table<CrnodemapsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Crnodemaps(Name alias, Table<CrnodemapsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Chrono.CHRONO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CRNODEMAPS_NODE_CODE, Indexes.CRNODEMAPS_NODE_CODE_2, Indexes.CRNODEMAPS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CrnodemapsRecord> getPrimaryKey() {
        return Keys.KEY_CRNODEMAPS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CrnodemapsRecord>> getKeys() {
        return Arrays.<UniqueKey<CrnodemapsRecord>>asList(Keys.KEY_CRNODEMAPS_PRIMARY, Keys.KEY_CRNODEMAPS_NODE_CODE_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnodemaps as(String alias) {
        return new Crnodemaps(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Crnodemaps as(Name alias) {
        return new Crnodemaps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnodemaps rename(String name) {
        return new Crnodemaps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crnodemaps rename(Name name) {
        return new Crnodemaps(name, null);
    }
}
